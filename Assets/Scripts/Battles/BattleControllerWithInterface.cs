// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Battles;
using System.Collections;
using Items;
using PixelCrushers.DialogueSystem;
using Utils;
using worldstore;


namespace Battles
{
	public class BattleControllerWithInterface : BattleControllerWithParticleEngines
	{
	
		public GameObject movesBar;
		public GameObject worldStoreBtn;
		public UILabel topLabel;
		protected MovesBarController barController;
		public GameObject baitButton;
		public GameObject escapeButton;
		protected string _battlesConversation = "";
		private bool _conversationOpen = false;
		protected bool _convertToWild = false;
		private WorldStoreMain _ws;
		public BattleControllerWithInterface ()
		{

		}
		
		protected void startConversation() {
			if(_battlesConversation!=null&&_battlesConversation.Length>0) {
				Lua.Result r = DialogueLua.GetVariable("battleTurn");
				r = DialogueLua.GetVariable("moveQueueEntryVal");
				ConversationTrigger c = GameObject.FindGameObjectWithTag("MainCamera").GetComponent<ConversationTrigger>();
				c.conversation = _battlesConversation;
				GameObject g = GameObject.FindGameObjectWithTag("UIRoot");
				c.OnUse (g.transform);
			}
		}
		public void conversationOpen() {
			_conversationOpen = true;
			this.barController.show = false;
		}
		public void testHighlightButtons() {
			_conversationOpen = false;
			Lua.Result item = DialogueLua.GetVariable("itemToAward");
			
			if(item.AsString.Length>0) {
				
				PlayerMain.REF.addToInventory(item.AsString);
				DialogueLua.SetVariable("itemToAward","");
				
			}
			Lua.Result r = DialogueLua.GetVariable("AutoSelectMove");
			if(r.AsInt>-1) {
				Debug.Log ("testHighlightButtons: "+r.AsInt);
				AutoSelectMove(r.AsInt);
				DialogueLua.SetVariable("AutoSelectMove",-1);
				if(r.AsInt==6) {
					_convertToWild = true;
					this.baitButton.gameObject.SetActive(true);
				}
				
			}
			if(!_battleComplete) {
				this.barController.show = true;
			}
		/*	SendMessageOnDialogueEvent s = this.GetComponent<SendMessageOnDialogueEvent>();
			for(int i = 0;i<s.onEnd.Length;i++) {
				s.onEnd[i].methodName = "testHighlightButtons";
				s.onEnd[i].target = this.transform;
			}
			Debug.Log (r.AsInt);*/
		}
		private void AutoSelectMove(int aMoveIndex) {
			this.barController.AutoSelectMove(aMoveIndex);
		}
		protected int _battleTurn {
			get {
				return DialogueLua.GetVariable("battleTurn").AsInt;
			}
			set {
				_positionOfMoveQueueEntry = 0;
				DialogueLua.SetVariable("moveQueueEntryVal",0);
				DialogueLua.SetVariable("battleTurn",value);
			}
		}
		
		protected int _positionOfMoveQueueEntry {
			get {
				Lua.Result r = DialogueLua.GetVariable("moveQueueEntryVal");
				if(r.AsInt==100) {
					return 0;
				}
				return r.AsInt;
			}
			set {
				if(value==0) {
					value = 100;
				}
				DialogueLua.SetVariable("moveQueueEntryVal",value);
			}
		}
		protected override void unpackInitData() {
			base.unpackInitData();
			FadeBlackScreen(0.0f,0.1f);
		}
		protected void hideExtraButtons() {
			if(baitButton!=null) {
				baitButton.gameObject.SetActive(false);
				escapeButton.gameObject.SetActive(false);
				worldStoreBtn.gameObject.SetActive(false);
			}
		}
		protected void FadeBlackScreen (float aEndLevel,float aTime) {
		//	iTween.FadeTo(this.blackScreen,aEndLevel,aTime);
		}
		void Awake() {
			barController = movesBar.GetComponent(typeof(MovesBarController)) as MovesBarController;
			barController.show = false;
			barController.gameObject.SetActive(false);
		}
		public void onWorldStore() {
	
		}
		protected void onHideInventory() {
			if(this._inventory!=null) {
				this._inventory.onHideInventory -= onHideInventory;
				this.barController.show = true;
				_inventory = null;
				cleanInventoryListeners();
			}
		}
		protected virtual void cleanInventoryListeners() {
			if(this._inventory!=null) {
				_inventory.onBaitSelected -= onBaitUsed;
				_inventory.onHideInventory -= onHideInventory;
				Destroy (_inventory);
			}
		}
		protected void onBaitUsed(ItemBait aBaitItem) {
		
		}
		protected void showMovesForMonster(GameObject aMonster) {
			
			BattleMonster monster = BattleConstants.gameObjectToBattleMonster(aMonster);
			this.showMovesForMonster(monster);
		}
		
		protected void showMovesForMonster(BattleMonster aMonster) {
			startConversation();
			
			barController.gameObject.SetActive(true);
			barController.show = true;
			barController.setMonsterMoves(aMonster);
			this.FadeBlackScreen(0.8f,0.1f);
			topLabel.text = "";//aMonster.name+" L"+aMonster.monster.level;
			topLabel.gameObject.SetActive(true);
		}

		protected void moveMonsterToLayer(BattleMonster aMonster,string aLayer) {
			aMonster.sortingLayer = aLayer;
		}
			
	}
}

