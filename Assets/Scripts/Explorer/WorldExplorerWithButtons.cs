// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using PixelCrushers.DialogueSystem.UnityGUI;
using Items;
using UnityEngine;
using System.Collections;
using PixelCrushers.DialogueSystem;
using Utils;
using worldstore;
using MTX;
using utils;


public class WorldExplorerWithButtons : WorldExplorerBase
{
	public UIButton questLogButton;
	public InventoryDisplay inventory;
	public GameObject menuButtons;
	public GameObject worldStore;
	public GameObject mapNameObject;
	public GameObject terraDollarPurchaser;
	public BuyMoreTerraDollars buyMore;
	public BuyMoreTerraCoins buyMoreCoins;
	public bool openChatOnTerrapediaClose = false;
	public int clicksAllowedIn = 4;
	public GameObject[] interfaceButtons;
	
	public WorldExplorerWithButtons ()
	{
	}
	
	public void onLaunchInstaHeal() {
		BetterList<MonsterDataMain> ms = PlayerMain.REF.monsters;
		bool canFullRanchHeal = false;
		for(int i = 0;i<ms.size&&i<3;i++) {
			if(ms[i]!=null&&ms[i].restingStatus!=ERestingStatus.Awake) {
				canFullRanchHeal = true;
			}
		}
	}
	public void onRanchviewClicked() {
		if(clicksAllowedIn>0) {
			return;
		}
		PlayerMain.REF.futureDoorway.targetXY = new Vector2();
		PlayerMain.REF.futureDoorway.futureNPCChat = "";
		Application.LoadLevel("RanchOverview");
	}
	public void onQuestLogClicked() {
		StartCoroutine(doOpenQuestLog());
	}
	private IEnumerator doOpenQuestLog() {
		yield return new WaitForEndOfFrame();
	}
	public void onTerrapediaClicked() {
		
		showInterface(false);
		Time.timeScale = 0.0f;
		
	}
	public override void Update() {
		if(clicksAllowedIn>0) {
			clicksAllowedIn--;
		}
		base.Update ();
	} 
	public void showInterface(bool aShow) {
		
		AvatarMover.setJoystickActive(aShow);
		if(menuButtons!=null)
			menuButtons.gameObject.SetActive(aShow);
		Lua.Result r = DialogueLua.GetVariable("InterfaceButtonsEnabled");
		if(mapNameObject!=null)
			mapNameObject.gameObject.SetActive(aShow);
		for(int i = 1;i<interfaceButtons.Length;i++) {
			switch(i) {
				case(1):if((r.AsInt&1)==1)	interfaceButtons[1].gameObject.SetActive(true); else interfaceButtons[1].gameObject.SetActive(false);break;
				case(2):if((r.AsInt&2)==2)	interfaceButtons[2].gameObject.SetActive(true); else interfaceButtons[2].gameObject.SetActive(false);break;
				case(3):if((r.AsInt&4)==4)	interfaceButtons[3].gameObject.SetActive(true); else interfaceButtons[3].gameObject.SetActive(false);break;
				case(4):if((r.AsInt&8)==8)	interfaceButtons[4].gameObject.SetActive(true); else interfaceButtons[4].gameObject.SetActive(false);break;
				case(5):if((r.AsInt&16)==16)	interfaceButtons[5].gameObject.SetActive(true); else interfaceButtons[5].gameObject.SetActive(false);break;
				case(6):if((r.AsInt&32)==32)	interfaceButtons[6].gameObject.SetActive(true); else interfaceButtons[6].gameObject.SetActive(false);break;
				case(7):if((r.AsInt&64)==64)	interfaceButtons[7].gameObject.SetActive(true); else interfaceButtons[7].gameObject.SetActive(false);break;
			}
		}
	}
	public void onTerrapediaCloseClicked() {
		showInterface(true);

		Time.timeScale = 1.0f;
		if(openChatOnTerrapediaClose) {
			Debug.Log ("Re opening chat please");
			GameObject av = GameObject.FindGameObjectWithTag("Player");
			ProximitySelector avM = av.GetComponent<ProximitySelector>();
		}
	}
	public void onTerraDollarsBuyOpen() {
		if(clicksAllowedIn>0) {
			return;
		}
		showInterface(false);
	}
	
	public void onTerraDollarsBuyExit() {
		showInterface(true);
		buyMore.onClosed -= onTerraDollarsBuyExit;
		buyMore = null;
	}
	
	
	public void onTerraCoinsBuyOpen() {
		if(clicksAllowedIn>0) {
			return;
		}
		showInterface(false);     
	}
	
	public void onTerraCoinsBuyExit() {
		showInterface(true);
		buyMoreCoins.onClosed -= onTerraCoinsBuyExit;
		buyMoreCoins = null; 
	}
	
	public void onWorldStoreCloseClicked() {
		
		showInterface(true);
		worldStore.gameObject.SetActive(false);
	}
	public void onWorldStoreOpenClicked() {
		showInterface(false);
		
	}
	private void onWorldStoreClosed(WorldStoreMain aStore) {
		aStore.onCloseWorldStore -= onWorldStoreClosed;
		showInterface(true);
	}
	
	public void onArenaOpen() {
	/*
		GameObject go = GameObject.FindGameObjectWithTag("MultiplayerController");
		
		SmartfoxHandler sf = go.GetComponent<SmartfoxHandler>();
		sf.Connect();
		this.showInterface(false);*/
		QuestLog.SetQuestState("Register_for_Multiplayer",QuestState.Success);
	}
	
	public void onArenaClose() {
		
		this.showInterface(true);
		if(GameObject.Find("ConnectingToUI")!=null)
			GameObject.Find("ConnectingToUI").gameObject.SetActive(false);
		GameObject l = GameObject.FindGameObjectWithTag("MultiplayerLobby");
		if(l!=null) {

		}
	}
	public void onInventoryClicked() {
		showInterface(false);
	}
	private void onInventoryHidden() {
		inventory = null;
		showInterface(true);
	}
	public void Awake() {
		
		this.showInterface(false);
		StartCoroutine(delayToShowInventory());
	}
	private IEnumerator delayToShowInventory() {
		yield return new WaitForSeconds(0.5f);
		
		this.showInterface(false);
	}
	public void onInventoryClosed() {
		
		showInterface(true);
	}
	

}


