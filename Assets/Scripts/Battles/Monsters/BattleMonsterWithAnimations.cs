// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;


namespace Battles
{
	public class BattleMonsterWithAnimations : BattleMonsterBase
	{
		private RuntimeAnimatorController _animC;
		private bool _proceedEvolution;
		private int _xpToAdd;
		private GameObject _targetOptionEffect;
		private GameObject _targetOptionOrb;
		public bool completedEvolving = false;
		private float _lastAnimAction;
		public const float IDLE_ACTION = 1f;
		public Vector3 returnPosition;

		
		public delegate void OnSpawnAttack(BattleMonster aMonster);
		public event OnSpawnAttack onSpawnAttack;
		

		public BattleMonsterWithAnimations ()
		{
		}
		public void Awake() {
			_anim = this.GetComponent("Animator") as Animator;
			_animC = _anim.runtimeAnimatorController;
			_anim.speed = UnityEngine.Random.Range(0.95f,1.05f);
		}
		
		public void ChangeLayerTo(string aNewLayer) {
			this.gameObject.layer = 15;
			foreach (Transform child in transform) {
				ChangeLayerTo (child,aNewLayer);
			}
		}
		public void ChangeLayerTo(Transform aChild,string aNewLayer) {
			aChild.gameObject.layer = 15;
			foreach (Transform child in aChild.transform) {
				ChangeLayerTo (child,aNewLayer);
			}
		}
		protected GameObject getEffect(string aEffect) {
			if(this==null) {
				return null;
			}
			if(Resources.Load("Battles/StatusEffects/"+aEffect)==null) {
				Debug.Log(aEffect+" could not load particle effect");
				return null;
			}
			
			if(this.gameObject!=null) {
				
				GameObject prefab = UnityEngine.Object.Instantiate(Resources.Load("Battles/StatusEffects/"+aEffect)) as GameObject;
				prefab.transform.parent = this.gameObject.transform;
				putParticlesInfront(prefab);
				return prefab;
			} else {
				return null;
			}
		}
		
		public static void putParticlesInfront(GameObject aObject) {

				aObject.GetComponent<ParticleSystem>().GetComponent<Renderer>().sortingLayerName = "ParticleLayer";
				ParticleSystem[] children = aObject.GetComponentsInChildren<ParticleSystem>();
				for(int j = 0;j<children.Length;j++) {
					children[j].GetComponent<Renderer>().sortingLayerName = "ParticleLayer";
				}
			
		}
		
		private GameObject getEvolutionEffect(string aEffect) {
			if(Resources.Load("Battles/Evolution/"+aEffect)==null) {
				Debug.Log("Evolution could not load particle effect");
				return null;
			}
			GameObject prefab = UnityEngine.Object.Instantiate(Resources.Load("Battles/Evolution/"+aEffect)) as GameObject;
			return prefab;
		}
		public void showEvolveAnim() {
			
			GameObject evolve = getEvolutionEffect("CFXM2_PowerAura");
			evolve.transform.parent = this.transform.parent;
			evolve.transform.localScale = this.transform.localScale;
			evolve.layer = 14;
			evolve.transform.localPosition = this.transform.localPosition;
			ParticleSystem[] childr = evolve.GetComponentsInChildren<ParticleSystem>();
			for(int i = 0;i<childr.Length;i++) {
				childr[i].gameObject.layer = 14;
			}
			StartCoroutine(evolveProcedure());
			BattleControllerWithParticleEngines.putParticlesInfront();
		}
		private IEnumerator evolveProcedure() {
			yield return new WaitForSeconds(1.25f);
		//	iTween.FadeTo(this.gameObject,0f,2f);
			yield return new WaitForSeconds(2f);
			completedEvolving = true;
			this.monster.evolve();
			_proceedEvolution = true;
			
			GameObject burst = getEvolutionEffect("CFXM3_Hit_Light_B_Air");
			burst.transform.parent = this.transform.parent;
			burst.transform.localScale = this.transform.localScale;
			burst.layer = 14;
			burst.transform.localPosition = this.transform.localPosition;
			BattleControllerWithParticleEngines.putParticlesInfront();
			
		}
		 
		public void pauseEvolution() {

			this.StopAllCoroutines ();
		}
		public GameObject createCaughtAnimEffect(int aStage) {
			if(Resources.Load("Battles/CaughtAnims/Stage"+aStage+"Anim")==null) {
				Debug.Log("CaughtEffect could not load particle effect");
				return null;
			}
			GameObject prefab = UnityEngine.Object.Instantiate(Resources.Load("Battles/CaughtAnims/Stage"+aStage+"Anim")) as GameObject;
			
			if(aStage==2) {
				prefab.transform.position = this.transform.localPosition;
			} else
			prefab.transform.position = this.SpawnPosition;
			BattleControllerWithParticleEngines.putParticlesInfront();
			return prefab;
		}
		
		public void doStatLoweringAnim() {
			_lastAnimAction = Time.time;
			GameObject g = getEffect("StatLowering");
			g.transform.position = this.SpawnPosition;
		}
		public void doStatRaisingAnim() {
			_lastAnimAction = Time.time;
			GameObject g = getEffect("StatRaising");
			g.transform.position = this.SpawnPosition;
		}
		
		public void showStatusEffect(EStatusEffects aEffect) {
			switch(aEffect) {
				case(EStatusEffects.Flinch):
					GameObject flinch = getEffect("FlinchEffect");
					if(flinch!=null)
					flinch.transform.position = this.SpawnPosition;
				break;
			case(EStatusEffects.Confusion):
					GameObject confusion = getEffect("ConfuseEffect");
					if(confusion!=null)
						confusion.transform.position = this.ConfuseSpawnPosition;
				break;
			case(EStatusEffects.Poison):
					GameObject poisoned = getEffect("PoisonedEffect");
					if(poisoned!=null) 
					poisoned.transform.position = this.ConfuseSpawnPosition;
					break;
				
			case(EStatusEffects.Freeze):
				GameObject frozen = getEffect("FrozenEffect");
				if(frozen!=null) 
					frozen.transform.position = this.ConfuseSpawnPosition;
				break;
			case(EStatusEffects.Paralyze):
				GameObject paralyze = getEffect("ParalyzeEffect");
				if(paralyze!=null) 
					paralyze.transform.position = this.ConfuseSpawnPosition;
				break;
			case(EStatusEffects.Burn):
				GameObject burn = getEffect("BurnEffect");
				if(burn!=null) 
					burn.transform.position = this.ConfuseSpawnPosition;
				break;
			case(EStatusEffects.Sleep):
				GameObject sleep = getEffect("SleepEffect");
				if(sleep!=null) {
					sleep.transform.position = this.ConfuseSpawnPosition;
				}
				break;
			}
			BattleControllerWithParticleEngines.putParticlesInfront();
		}

		public void fadeInMakeup() {
			if(this._monsterRef==null) {
				return;
			}

			if(this._monsterRef.restingStatus==ERestingStatus.Awake&&_makeupFaded) {
				iTween.FadeTo(this._monsterMakeup.gameObject,1f,1f);
				_makeupFaded = false;
			}
		}
		protected Animator myAnimator {
		
			get {
				if(_anim==null)
					_anim = this.GetComponent("Animator") as Animator;
				return _anim;
			}
		}
		public void doIdleAnimation() {
			_lastAnimAction = Time.time;
			if(this._monsterRef.restingStatus==ERestingStatus.Awake&&!this._monsterRef.lingeringEffects.hasEffect(EStatusEffects.Sleep)) {
				myAnimator.SetInteger("AnimState",(int) EMonsterAnimations.Idle);
				fadeInMakeup();
			}
			
		}
		
		public void doAttackAnimation(MoveQueueItem aCurrentItem) {
			_lastAnimAction = Time.time; 
			if(this._monsterRef.restingStatus==ERestingStatus.Awake&&!this._monsterRef.lingeringEffects.hasEffect(EStatusEffects.Sleep)) {
				_anim.SetInteger("AnimState",-1);
				if(aCurrentItem.moveData.attackMecanim=="NoAnim") {
					this.OnSpawnEffect();
				} else
					_anim.SetTrigger(aCurrentItem.moveData.attackMecanim);
			//	fadeInMakeup(); 
			//	StartCoroutine(doReturnToIdle());
			}
		}
		public void OnEndOfAnim() {
			Debug.Log ("OnEndOfAnim()");
		}
		public void OnSmallCameraShake() {
			GameObject g = GameObject.FindGameObjectWithTag ("MainCamera");
			CameraShake c = g.GetComponent<CameraShake> ();
			c.SmallShake ();
		}
		public IEnumerator doReturnToIdle() {
			_lastAnimAction = Time.time;
			yield return new WaitForEndOfFrame ();
		//	myAnimator.SetInteger("AnimState",(int) EMonsterAnimations.Idle);
			if (returnPosition != null && returnPosition.magnitude != 0f) {
				Hashtable h = new Hashtable();
				h.Add("position",this.returnPosition);
				h.Add ("time",0.5f);
				h.Add ("oncompletetarget",this.gameObject);
				iTween.MoveTo(this.gameObject,h);
			}
		}
		
		public void doDefenseAnimation(MoveQueueItem aCurrentItem) {
			_lastAnimAction = Time.time;
			
			if(this._monsterRef==null||(this._monsterRef.restingStatus==ERestingStatus.Awake&&!this._monsterRef.lingeringEffects.hasEffect(EStatusEffects.Sleep))) {
				if(this._anim!=null&&aCurrentItem!=null&&aCurrentItem.moveData!=null)
					_anim.SetTrigger(aCurrentItem.moveData.hitMecanim);
				
				fadeInMakeup();
			}
		}  
		public void addXP(int aXPToAdd) {
			_xpToAdd = aXPToAdd;
		}  
		public void showTargetOption() {
			removeTargetOption();
			if(Resources.Load("Battles/TargetMonsterLight")==null) {
				Debug.Log("Could not load target effect");
				return;
			}
			if(this.monster.restingStatus==ERestingStatus.Awake) {
				GameObject prefab = UnityEngine.Object.Instantiate(Resources.Load("Battles/TargetMonsterLight")) as GameObject;
				prefab.transform.localScale = new Vector3(1f,1f,1f);
				prefab.transform.SetParent(this.transform.parent);
				prefab.transform.localPosition = this.transform.localPosition;
				prefab.tag = "ParticleSystems";
				
				_targetOptionEffect = prefab;
			/*	
				prefab = UnityEngine.Object.Instantiate(Resources.Load ("Battles/MoveEffects/SelectThisMonster")) as GameObject;
				prefab.transform.localScale = new Vector3(1f,1f,1f);
			//	Vector3 pos = prefab.transform.localPosition;
			//	pos.y += 3;
				prefab.transform.parent = this.transform;
				prefab.tag = "ParticleSystems";
				prefab.transform.localPosition = new Vector3(0f,3f,0f);
				this._targetOptionOrb = prefab;*/
				putParticlesInfront(); 
			}
		}
		public void removeTargetOption() {
			if(_targetOptionEffect!=null) {
				Destroy(_targetOptionEffect.gameObject);
				_targetOptionEffect = null;
			}
			if(_targetOptionOrb!=null) {
				Destroy (_targetOptionOrb.gameObject);
				_targetOptionOrb = null;
			}
		}
		
		public static void putParticlesInfront() {
			GameObject[] allParticles = GameObject.FindGameObjectsWithTag("ParticleSystems");
			for(int i = 0;i<allParticles.Length;i++) {
				
				allParticles[i].GetComponent<ParticleSystem>().GetComponent<Renderer>().sortingLayerName = "MiddleLayer";
				ParticleSystem[] children = allParticles[i].GetComponentsInChildren<ParticleSystem>();
				for(int j = 0;j<children.Length;j++) {
					children[j].GetComponent<Renderer>().sortingLayerName = "MiddleLayer";
				}
			}
		}

		public void OnSpawnEffect() {
			Debug.Log ("OnSpawnEffect!!");
			if(onSpawnAttack!=null) {
				onSpawnAttack(this as BattleMonster);
			} 
		}
		
		public void Update() {
			if (Time.time - _lastAnimAction > IDLE_ACTION&&!BattleControllerMain.REF.moveQueueActive) {
				_lastAnimAction = Time.time;
				if(_anim.GetInteger("AnimState")==0) {
					if(UnityEngine.Random.Range(1,4)==1) {
						switch(UnityEngine.Random.Range (1,4)) {
							case(1):_anim.SetInteger("AnimState",-1);_anim.SetTrigger("AggressiveStance1");break;
							case(2):_anim.SetInteger("AnimState",-1);_anim.SetTrigger("AggressiveStance2");break;
							case(3):_anim.SetInteger("AnimState",-1);_anim.SetTrigger("AggressiveStance3");break;
							case(4):_anim.SetInteger("AnimState",-1);_anim.SetTrigger("AggressiveStance4");break;

						}
					}
				} else {
					AnimatorStateInfo inf = _anim.GetCurrentAnimatorStateInfo(0);
					int idleState = Animator.StringToHash("Base.Idle");
					if(idleState == inf.fullPathHash) {
						_anim.SetInteger("AnimState",0);
					}
				}
			}
			if(_proceedEvolution) {
				_proceedEvolution = false;
				GameObject g = UnityEngine.Object.Instantiate(this._monsterRef.prefab) as GameObject;
				g.name = "Evolved State";
				g.transform.parent = this.gameObject.transform.parent;
				g.transform.position = this.gameObject.transform.position;
				g.transform.localPosition = this.gameObject.transform.localPosition;
				g.transform.localScale = this.gameObject.transform.localScale;
				g.layer = this.gameObject.layer;
				ChangeLayerTo(g.transform,"UI");
				SpriteRenderer[] rend = this.gameObject.GetComponentsInChildren<SpriteRenderer>();
				for(int i = 0;i<rend.Length;i++) {
					Destroy (rend[i].gameObject);
				}
				
				iTween.ScaleFrom(g,new Vector3(0f,0f,0f),0.5f);
				Renderer[] allRenderers = g.GetComponentsInChildren<Renderer>();
				for(int i = 0;i<allRenderers.Length;i++) {
					allRenderers[i].sortingLayerName = "MonsterLayer3";
					
				}
					
			}
			
			if(_xpToAdd>200.0f) {
				_xpToAdd-=50;
				this.monster.addXP(50.0f);
			} else if(_xpToAdd>100.0f) {
				_xpToAdd-=10;
				this.monster.addXP(10.0f);
			} else if(_xpToAdd>1.0f) {
				
				_xpToAdd-=1;
				PlayerMain.REF.allowMonsterSave = false;
				this.monster.addXP(1.0f);
			}
		}
	}
}

