// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;


public class NPCMover : MonoBehaviour
{
	
	public Animator frontAnimator;
	public Animator sideAnimator;
	public Animator backAnimator;
	public Animator _animator;
	public GameObject frontView;
	public GameObject sideView;
	public GameObject backView;
	public float defaultScale = 1f;
	
	public float fadeOutSeconds = 3f;
	public const float MOVEMENT_DAMPENER = 5.5f;
	public Vector3[] forcedWalkPath;
	public bool repeatWalkpath;
	
	public bool fadeOutOnLast;
	
	public GameObject tagInOtherNPC;
	public bool reEnableColliderOnComplete;
	private WorldExplorer _explorer;
	public bool firstUpdate = true;
	private float _lastUpdate;
	public float maxWalkSpeeds;
	private float _walkSpeed = 0.1f;
	private bool _firstForcedWalk = true;
	private int _lastDirection = -1;
	public bool destroyMoverOnTagOut = true;
	private string _lastLayer = "nolayer";
	public int currentPathState = 0;
	public static string debugOnlyGameObject = "ZinaWithTaiyuna";
	public EDirection finalFacingDirection;
	public EDirection startFacingDirection = EDirection.South;
//	public bool destroyConversationOnFinish = false;
	public NPCMover ()
	{
	}

	
	[ContextMenu("ChangeLayers")]
	void Start() {
		this.tag = "NPC";
		if(defaultScale==0.5f) {
			defaultScale = 1f;
		}
		if(frontView==null) {
			if(transform.FindChild("Front")!=null)
				frontView = transform.FindChild("Front").gameObject;
		}
		if(sideView==null) {
			if( transform.FindChild("Side")!=null)
				sideView = transform.FindChild("Side").gameObject;
		}
		
		if(backView==null) {
			if( transform.FindChild("Back")!=null)
				backView = transform.FindChild("Back").gameObject;
		}
		
		changeLayer ("MainPlayer");

		if(frontAnimator==null&&frontView!=null) {
			frontAnimator = frontView.GetComponent<Animator>();
		}
		if(sideAnimator==null&&sideView!=null) {
			sideAnimator = sideView.GetComponent<Animator>();
		}
		if(backAnimator==null&&backView!=null) {
			backAnimator = backView.GetComponent<Animator>();
		}
		this.setInitialDirection();
		FixedUpdate ();
		currentPathState = 0;
	}
	[ContextMenu("ChangeLayersNoMover")]
	void ChangeLayersNoMoverEditor() {
		
		if(frontView==null) {
			if(transform.FindChild("Front")!=null)
				frontView = transform.FindChild("Front").gameObject;
		}
		if(sideView==null) {
			if( transform.FindChild("Side")!=null)
				sideView = transform.FindChild("Side").gameObject;
		}
		
		if(backView==null) {
			if( transform.FindChild("Back")!=null)
				backView = transform.FindChild("Back").gameObject;
		}
		
		changeLayer ("MainPlayer");
		
		if(frontAnimator==null&&frontView!=null) {
			frontAnimator = frontView.GetComponent<Animator>();
		}
		if(sideAnimator==null&&sideView!=null) {
			sideAnimator = sideView.GetComponent<Animator>();
		}
		if(backAnimator==null&&backView!=null) {
			backAnimator = backView.GetComponent<Animator>();
		}
		this.setInitialDirection();
		currentPathState = 0;
	}
	
	public void changeLayer(string aChangeTo) {
		if(_lastLayer!=aChangeTo) {
			_lastLayer = aChangeTo;
			SpriteRenderer[] renderer = this.GetComponentsInChildren<SpriteRenderer> ();
			for (int i = 0; i<renderer.Length; i++) {
				
				renderer [i].sortingLayerName = aChangeTo;
			}
	
			if (frontView != null) {
				renderer = frontView.GetComponentsInChildren<SpriteRenderer> ();
				if(renderer.Length==0) {
					renderer = this.GetComponentsInChildren<SpriteRenderer>();
				}
				for (int i = 0; i<renderer.Length; i++) {
		
						renderer [i].sortingLayerName = aChangeTo;
						if(renderer[i].gameObject.name.Contains("Shadow")) {
							renderer[i].sortingLayerName = "PlayerLower";
							renderer[i].sortingOrder = -1;
						}
				}
			}
	
			for (int i = 0; i<renderer.Length; i++) {
				
				renderer [i].sortingLayerName = aChangeTo;
				if(renderer[i].gameObject.name.Contains("Shadow")) {
					renderer[i].sortingLayerName = "PlayerLower";
					renderer[i].sortingOrder = -1;
				}
				
			}
	
			if (sideView != null) {
				renderer = sideView.GetComponentsInChildren<SpriteRenderer> ();
				for (int i = 0; i<renderer.Length; i++) {
	
						renderer [i].sortingLayerName = aChangeTo;
					if(renderer[i].gameObject.name.Contains("Shadow")) {
						renderer[i].sortingLayerName = "PlayerLower";
						renderer[i].sortingOrder = -1;
					}
				}
			}
			if (backView != null) {
				renderer = backView.GetComponentsInChildren<SpriteRenderer> ();
				for (int i = 0; i<renderer.Length; i++) {
	
						renderer [i].sortingLayerName = aChangeTo;
					if(renderer[i].gameObject.name.Contains("Shadow")) {
						renderer[i].sortingLayerName = "PlayerLower";
						renderer[i].sortingOrder = -1;
					}
				}
			}
		}
	}

	public void OnDisable() {
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - On Disable Walker!: "+currentPathState+" - ForcedWalkPath Length: "+forcedWalkPath.Length+"</color>");
		
	}
	
	public void OnEnable() {
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - On Enable Walker!: "+currentPathState+" - ForcedWalkPath Length: "+forcedWalkPath.Length+"</color>");
		
	}
	private void setInitialDirection() {
		side = false;
		front = false;
		back = false;
		switch(this.startFacingDirection) {
		case(EDirection.South):default: front = true;break;
		case(EDirection.North): back = true;;break;
		case(EDirection.East): side = true;break;
		case(EDirection.West): side = true;break;
		}
		this.changeLayer("MainPlayer");
	}
	public void disableColliders() {
		Collider2D[] colliders = this.GetComponents<Collider2D>();
		for(int i = 0;i<colliders.Length;i++) {
			colliders[i].enabled = false;
		}
		
	}
	private void setFinalDirection() {
		
		this.changeLayer("MainPlayer");
		side = false;
		front = false;
		back = false;
		switch(finalFacingDirection) {
			case(EDirection.South):default: front = true;break;
			case(EDirection.North): back = true;;break;
			case(EDirection.East): side = true;break;
			case(EDirection.West): side = true;break;
		}
		reEnableCollidersOnComplete();
	}
	public void FirstTurnWalkerHandler() {
		if(firstUpdate) {
			if(this.tagInOtherNPC!=null||this.fadeOutOnLast) {
				this.currentPathState = 0;
			}
		}
	}
	private void doTagInOtherNPC() {
		this.gameObject.SetActive(false);
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - Tagging in other NPC: "+tagInOtherNPC);
		this.tagInOtherNPC.gameObject.SetActive(true);
	//	AdvancedNPCDisappearer.debugOnlyGameObject = tagInOtherNPC.name;
//		NPCMover.debugOnlyGameObject = tagInOtherNPC.name;
		this.tagInOtherNPC.GetComponent<AdvancedNPCDisappearer>().getTaggedIn();
//		destroyConversationsOnFinish();
		if(destroyMoverOnTagOut)
			Destroy (this.gameObject);
		  
		
	} 
	public void FixedUpdate () {
		if(this._animator!=null) {
			if(Time.time-_lastUpdate>0.1f) {
				if(this.forcedWalkPath.Length==0) {
					this.enabled = false;
				}
				if(_animator!=null)
					_animator.SetInteger("AnimState",0);
			} else {
				//	this._animator.enabled = true;
			}
		} else {
			_animator = frontAnimator;
		}
		
		if(forcedWalkPath!=null&&forcedWalkPath.Length>currentPathState&&forcedWalkPath[currentPathState].x!=0&&forcedWalkPath[currentPathState].y!=0) {
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color=#ffa500ff>We have a walk path, it is bigger than my currentPathState and it was not 0,0</color>");
			disableColliders();
			if(firstUpdate) {
				if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
					Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - Current Path State: "+currentPathState+" - ForcedWalkPath Length: "+forcedWalkPath.Length+"</color>");
				
				// If first update
				if(!this.repeatWalkpath) {
					// if no repeat walk pat
					if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
						Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - This was not a repeat walkpath</color>");
					
					
					this.transform.position = forcedWalkPath[forcedWalkPath.Length-1];
					
					if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
						Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - Final Walk Path: "+forcedWalkPath[forcedWalkPath.Length-1].ToString()+"</color>");
					
					
					currentPathState = forcedWalkPath.Length-1;
					if(this.fadeOutOnLast) {
						if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
							Debug.Log ("<color=#ffa500ff>Fade out on last is true</color>");
						
						
						this.gameObject.SetActive(false);
						if(tagInOtherNPC!=null) {
							if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
								Debug.Log ("<color=#ffa500ff>Tagging in NPC: "+tagInOtherNPC.name+"</color>");
							
							
							doTagInOtherNPC();
							return;
						}
						if(destroyMoverOnTagOut)
						Destroy (this.gameObject);
						
					} else {
						if(tagInOtherNPC!=null) {
							if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
								Debug.Log ("<color=#ffa500ff>Tagging in NPC: "+tagInOtherNPC.name+"</color>");
							
							
							doTagInOtherNPC();
							return;
						}
						this.setFinalDirection();
						Destroy (this);
						return;
					}
				}
				this.enabled = false;
				firstUpdate = false;
				reEnableCollidersOnComplete();
				if(this.tagInOtherNPC!=null) {
					doTagInOtherNPC();
					return;
				}
				return;
			}
			
			
			if(maxWalkSpeeds==0f) {
				maxWalkSpeeds = 1f;
			}
			Vector3 forcedWalkSpeed = forcedWalkPath[currentPathState]-this.transform.position;
			if(forcedWalkSpeed.magnitude>maxWalkSpeeds) {
				float speedDivider = maxWalkSpeeds/forcedWalkSpeed.magnitude;
				forcedWalkSpeed.x = forcedWalkSpeed.x * speedDivider;
				forcedWalkSpeed.y = forcedWalkSpeed.y * speedDivider;
			}
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color=#ffa500ff>Forced Walk speed is"+forcedWalkSpeed.ToString()+"</color>");
			
			
			if(forcedWalkSpeed.magnitude<maxWalkSpeeds*0.5f) {
				if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
					Debug.Log ("<color=#ffa500ff>I'm now close enough to destination to move to next walk path</color>");
					
				currentPathState++;
				if(currentPathState==forcedWalkPath.Length) {
					WorldExplorer we = GameObject.FindGameObjectWithTag("MainCamera").GetComponent<WorldExplorer>();
					we.createQuestArrows();
					Debug.Log ("<color=#ffa500ff>I'm now at the end of my walk path</color>");
					if(this.fadeOutOnLast) {
						if(this.tagInOtherNPC!=null) {
							this.doTagInOtherNPC();
						}
						if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
							Debug.Log ("<color=#ffa500ff>"+this.gameObject.name+" - Fading out: "+this.name+" - End of walker and fadeOutOnLast was true</color>");
					//	iTween.FadeTo(gameObject,0f,1f);
						Destroy (this.gameObject);
						fadeOutOnLast = false;
					}

				}
				if(currentPathState>=forcedWalkPath.Length&&repeatWalkpath) {
					currentPathState = 0;
					if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
						Debug.Log ("<color=#ffa500ff>repeat walkpath, go back to start of it</color>");
					
				} else if(currentPathState>=forcedWalkPath.Length&&!repeatWalkpath) {
					if(this.tagInOtherNPC!=null) {
						
						if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
							Debug.Log ("<color=#ffa500ff>end of path, tag in other npc</color>");
						this.doTagInOtherNPC();
					} else {
						
						if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
							Debug.Log ("<color=#ffa500ff>set final direction</color>");
						setFinalDirection();
						
					}
					if(fadeOutOnLast) {
						this.gameObject.SetActive(false);
						
						if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
							Debug.Log ("<color=#ffa500ff>I was set to fade out on last, delete</color>");
						if(destroyMoverOnTagOut)
						Destroy (this.gameObject);
						return;
					}
					if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
						Debug.Log ("<color=#ffa500ff>end of path, nothing todo apart from turn my colliders back on</color>");
					setFinalDirection();
					reEnableCollidersOnComplete();
					this.enabled = false;
					Destroy (this);
					return;
				}
			}
			this.walkInDirection(forcedWalkSpeed);
		} 
	}
	private void reEnableCollidersOnComplete() {
		if(reEnableColliderOnComplete) {
			BoxCollider2D[] colliders = this.GetComponents<BoxCollider2D>();
			for(int i = 0;i<colliders.Length;i++) {
				colliders[i].enabled = true;
			}
		} else {
			BoxCollider2D[] colliders = this.GetComponents<BoxCollider2D>();
			for(int i = 0;i<colliders.Length;i++) {
				colliders[i].enabled = false;
			}
		}
	}
	public WorldExplorer explorer {
		get {
			if(_explorer==null) {
				GameObject we = GameObject.FindGameObjectWithTag("MainCamera");
				_explorer = we.GetComponent<WorldExplorer>();
			}
			return _explorer;
		}
	}
	public void walkInDirection(Vector3 aRelativeVec) {
		if(firstUpdate) {
			
			firstUpdate = false;
		}
		if((aRelativeVec.x!=0f)||(aRelativeVec.y!=0f)) {
			_lastUpdate = Time.time;
		}
		Vector2 originalPos = new Vector2(this.transform.position.x,this.transform.position.y);
		aRelativeVec = aRelativeVec / MOVEMENT_DAMPENER;
		
		int movementSpeed = 0; // Idle
		// 1 = Walking
		// 2 = Running
		// 3 = Bending down
		if((aRelativeVec.magnitude>0)&&(aRelativeVec.magnitude<_walkSpeed)) {
			movementSpeed = 1;
		} else
		if(aRelativeVec.magnitude>=_walkSpeed) {
			movementSpeed = 2;
		}
		
		if(_animator!=null) {
			_animator.SetInteger("AnimState",movementSpeed);
		}
		this.transform.position += aRelativeVec;
		Vector3 pos = this.transform.position;
		pos.y += 0.5f;
		
		if(this.explorer!=null) {
		
		}
		setMyDirection(aRelativeVec);
	}

	private bool front {
		set {
			if(frontView!=null)
				this.frontView.gameObject.SetActive(value);
		}
	}
	private bool side {
		set {
			if(sideView!=null)
				this.sideView.gameObject.SetActive(value);
		}
	}
	private bool back {
		set {
			if(backView!=null)
				this.backView.gameObject.SetActive(value);
		}
	}
	private void setMyDirection(Vector3 aRelativeVec) {
		float radians = Mathf.Atan2(aRelativeVec.y,aRelativeVec.x);
		int roughDegrees = (int) (radians * 57.2);
		roughDegrees = 360 - (roughDegrees+270);
		if(roughDegrees<0) {
			roughDegrees+=360;
		}if((roughDegrees>325)||roughDegrees<45) {
			
			if(_lastDirection!=2) {
				front = false;
				side = false;
				_animator = this.backAnimator;
				back = true;
				_lastDirection = 2;
				
				this.changeLayer("MainPlayer");
			}
		} else 
		if(roughDegrees>=45&&roughDegrees<135) {
			if(_lastDirection!=1) {
				front = false;
				back = false;
				_animator = this.sideAnimator;
				side = true;
				if(sideView!=null) {
					Vector3 newScale = sideView.transform.localScale;
					newScale.x = defaultScale;
					sideView.transform.localScale = newScale;
				}
				_lastDirection = 1;
				
				this.changeLayer("MainPlayer");
			}
		} else 
		if(roughDegrees>=135&&roughDegrees<225) {
			//	_animator.SetInteger("facing",2);
			if(_lastDirection!=0) {
				side = false;
				back = false;
				_animator = this.frontAnimator;
				front = true;
				_lastDirection = 0;
				
				this.changeLayer("MainPlayer");
			}
		} else {
			//	_animator.SetInteger("facing",3);
			if(_lastDirection!=3) {
				front = false;
				back = false;
				side = true;
				Vector3 newScale = sideView.transform.localScale;
				newScale.x = -defaultScale;
				sideView.transform.localScale = newScale;
				_animator = sideAnimator;
				_lastDirection = 3;
				
				this.changeLayer("MainPlayer");
			}
			
		}
	}
}

