// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using utils;


public class MoveTreeCompletionData
{
	private BetterList<MoveTreeCompletionDataRow> _items = new BetterList<MoveTreeCompletionDataRow>();
	public MoveTree tree;
	public MoveTreeCompletionData (MoveTree aInitData) {
		tree = aInitData;
		BetterList<MoveTreeItem> list = aInitData.Moves;

		for(int i = 0 ; i < list.size ; i++ ) {
			_items.Add( new MoveTreeCompletionDataRow( list[i] ) );
		}

		for(int i = 0; i< _items.size ; i++) {
			_items[i].setPreceedingMove(_items);
		}
	}
	public MoveTreeCompletionDataRow contains(MoveLibItem aItem) {
		for(int i = 0;i<_items.size;i++) {
			if(_items[i].moveData==aItem) {
				return _items[i];
			}
		}
		return null;
	}
	public override string ToString () {
		string s = "";
		for(int i = 0 ;i<_items.size;i++) {
			s+=_items[i].currentUnlockLevel;
			if(i<_items.size-1) {
				s += "|";
			}
		}
		return Base64Compressor.Base64Encode(s);
	}
	
	public void FromString(string aString) {
		string s = Base64Compressor.Base64Decode(aString);
		char[] delimiterChars = {'|'};
		string[] items = s.Split(delimiterChars);
		
		for(int i = 0;i<_items.size;i++) {
			if(i<items.Length) {
				_items[i].currentUnlockLevel = Convert.ToByte(items[i]);
			}
		}
	}
	public BetterList<MoveTreeCompletionDataRow> items {
		get {
			return _items;
		}
	}
	private BetterList<MoveTreeCompletionDataRow> getBranchByPower(EMoveBranch aMoveBranch,byte aMaxMoves) {
		BetterList<MoveTreeCompletionDataRow> r = new BetterList<MoveTreeCompletionDataRow>();
		int i = _items.size;
		while(i>0&&r.size<aMaxMoves) {
			i--;
			if(_items[i].moveBranch==aMoveBranch&&_items[i].canBeSelected) {
				r.Add(_items[i]);
			}
		}
		return r;
	}
	
	public BetterList<MoveTreeCompletionDataRow> getBranch(EMoveBranch aBranch) {
		BetterList<MoveTreeCompletionDataRow> r = new BetterList<MoveTreeCompletionDataRow>();
		int i = _items.size;
		while(i>0) {
			i--;
			if(_items[i].moveBranch==aBranch) {
				r.Add(_items[i]);
			}
		}
		return r;
	}
	public void addUnlockedToList(BetterList<MoveTreeCompletionDataRow> aList) {
		for(int i = 0 ; i<_items.size;i++) {
			if(_items[i].currentUnlockLevel>0) {
				//Debug.Log ("Adding unlocked to list: "+_items[i].moveData.Name+" - Branch is: "+_items[i].moveBranch);
				aList.Add(_items[i]);
			}
		}
	}
	private bool hasMoveInBranch(EMoveBranch aBranch) {
		for(int i = 0;i<_items.size;i++) {
			if(_items[i].moveBranch==aBranch&&_items[i].currentUnlockLevel>0) {
				return true;
			}
		}
		return false;
	}
	public bool assignBasicMove(int aEvolutionLevel,int aLevel,int aMaxEvolution) {
		if(!hasMoveInBranch(EMoveBranch.AttackingBranch1)) {
			for(int i = 0; i< _items.size ; i++) {
				if(_items[i].currentUnlockLevel==0&&_items[i].moveBranch==EMoveBranch.AttackingBranch1) {
					if(_items[i].canUnlock(aEvolutionLevel,aLevel,aMaxEvolution)==EMoveTreeUnlockFailureReason.Success) {
						unlockTreeItem(_items[i].itemRef.ID,aEvolutionLevel,aLevel,aMaxEvolution);
						return true;
					}
				}
			}
		}
		if(!hasMoveInBranch(EMoveBranch.StatusEffectBranch)) {
			for(int i = 0; i< _items.size ; i++) {
				if(_items[i].currentUnlockLevel==0&&_items[i].moveBranch==EMoveBranch.StatusEffectBranch) {
					if(_items[i].canUnlock(aEvolutionLevel,aLevel,aMaxEvolution)==EMoveTreeUnlockFailureReason.Success) {
						unlockTreeItem(_items[i].itemRef.ID,aEvolutionLevel,aLevel,aMaxEvolution);
						return true;
					}
				}
			}
		}
		return false;
	}
	public bool assignMoveAtRandom(int aEvolutionLevel,int aLevel,int aMaxEvolution) {
		BetterList<MoveTreeCompletionDataRow> available = new BetterList<MoveTreeCompletionDataRow>();
		for(int i = 0; i< _items.size ; i++) {
			EMoveTreeUnlockFailureReason couldUnlock = _items[i].canUnlock(aEvolutionLevel,aLevel,aMaxEvolution);
			if(couldUnlock==EMoveTreeUnlockFailureReason.Success) {
				available.Add(_items[i]);
			} else {
			}
		}

		if(available.size>0) {
			available.Sort(MoveTreeCompletionData.SortByMovePoints);
			
			if(unlockTreeItem(available[0].itemRef.ID, aEvolutionLevel, aLevel,aMaxEvolution)) {
				
				Debug.Log ("Unlocked move: "+_items[0].moveData.Name+" - On Branch: "+this._items[0].moveBranch);
				return true;
			} 
		}
		return false;
	}
	private static int SortByMovePoints(MoveTreeCompletionDataRow a1, MoveTreeCompletionDataRow a2) {
		if(a1.pointsToUnlock<a2.pointsToUnlock) {
			return 1;
		}
		else
			return -1;
	}
	
	public SelectedMoveData unlockTreeItemOverride(string aMove) {
		for(int i = 0 ; i < _items.size ; i++ ) {
			if(_items[i].itemRef.moveData.plainName == aMove) {
					_items[i].currentUnlockLevel++;
					SelectedMoveData md = new SelectedMoveData();
					md.setMove(EMoveUnlockType.Manual,_items[i]);
					return md;
				}
			} 
		return null;
	}
	public bool unlockTreeItem(int aItemToUnlock,int aEvolutionLevel,int aLevel,int aMaxEvolution) {
		for(int i = 0 ; i < _items.size ; i++ ) {
			if(_items[i].itemRef.ID == aItemToUnlock) {
				if(_items[i].canUnlock(aEvolutionLevel,aLevel,aMaxEvolution)==EMoveTreeUnlockFailureReason.Success) {
					_items[i].currentUnlockLevel++;
					return true;
				}
			}
		}
		return false;
	}
	public byte pointsUsed {
		get {
			byte c = 0;
			for(int i = 0 ; i < _items.size ; i++) {
				c += _items[i].currentUnlockLevel;
			}
			return c;
		}
	}
}

