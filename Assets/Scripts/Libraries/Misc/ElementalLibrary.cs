// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Google2u;
using System.Collections.Generic;
using UnityEngine;


public class ElementalLibrary : MonoBehaviour
{
	public static ElementalLibrary REF;
	private BetterList<ElementalType> elements = new BetterList<ElementalType>();
	
	public Color AirColor;
	public Color ArcaneColor;
	public Color ElectricColor;
	public Color FireColor;
	public Color GrassColor;
	public Color NormalColor;
	public Color IceColor;
	public Color WaterColor;
	public UISprite airElementSprite;
	public UISprite arcaneElementSprite;
	public UISprite earthElementSprite;
	public UISprite electricElementSprite;
	public UISprite fireElementSprite;
	public UISprite grassElementSprite;
	public UISprite normalElementSprite;
	public UISprite iceElementSprite;
	public UISprite waterElementSprite;
	
	public ElementalLibrary ()
	{

	}
	
	public void recolourButtonForElement(UIButton aBtn,ElementalType aElement) {
		switch(aElement.Name) {
			case("Earth"):aBtn.defaultColor = GrassColor;break;
			case("Water"):aBtn.defaultColor = WaterColor;break;
			case("Ice"):aBtn.defaultColor = IceColor;break;
			case("Air"):aBtn.defaultColor = AirColor;break;
			case("Fire"):aBtn.defaultColor = FireColor;break;
			case("Arcane"):aBtn.defaultColor = ArcaneColor;break;
			case("Electric"):aBtn.defaultColor = ElectricColor;break;
			case("Normal"):aBtn.defaultColor = NormalColor;break;
			
		}
		Color defaultColour = aBtn.defaultColor;
		float adder = 10f/255f;
		Color hoverColor = new Color(defaultColour.r+adder,defaultColour.g+adder,+defaultColour.b+adder,1);
		Color depressedColor = new Color(defaultColour.r-adder,defaultColour.g-adder,+defaultColour.b-adder,1);
		aBtn.hover = hoverColor;
		aBtn.pressed = depressedColor;
	}
	public void Start() {
		if(REF!=null) {
			Destroy (this);
			return;
		}
		REF = this;

		DontDestroyOnLoad(this);
	}
	public void init() {
		List<ElementTypesRow> rows = ElementTypes.Instance.Rows;
		for(int i = 0; i < rows.Count ; i++) {
			elements.Add(new ElementalType(rows[i]));
		}
	}
	public ElementalType getElement(int aID) {
		for (int i = 0; i< elements.size; i++) {
			if(elements[i].ID==aID) {
				return elements[i];
			}
		}
		return null;
	}
	public UISprite getSprite(ElementalType aElementType) {
		switch(aElementType.Name) {
			case("Earth"):return earthElementSprite;break;
			case("Water"):return waterElementSprite;break;
			case("Ice"):return iceElementSprite;break;
			case("Air"):return airElementSprite;break;
			case("Fire"):return fireElementSprite;break;
			case("Arcane"):return arcaneElementSprite;break;
			case("Electric"):return electricElementSprite;break;
			case("Normal"):default:return normalElementSprite;break;	
		}
	}
	public BetterList<ElementalType> getElementsFromFlags(int aFlags) {
		BetterList<ElementalType> r = new BetterList<ElementalType>();
		for(int i = 0;i<elements.size;i++) {
			if((elements[i].binaryFlag&aFlags)==elements[i].binaryFlag) {
				r.Add(elements[i]);
			}
		}
		return r;
	}
	public ElementalType getElement(string aName) {
		for (int i = 0; i< elements.size; i++) {
				if(elements[i].Name==aName) {
					return elements[i];
				}
		}
		return null;
	}
}


