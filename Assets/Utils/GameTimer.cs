// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Timers;
using UnityEngine;
using PixelCrushers.DialogueSystem;
using utils;


public class GameTimer : MonoBehaviour
{
	public static GameTimer REF;

	
	public delegate void OnTimer();
	public event OnTimer OnTimerTick;
	
	public Color sbColor;
	public bool requestMonsterSave;
	public float lastTick;
	public float lastTenth;
	public static bool WAKE_ON_HEALED = false;
	public static bool MONSTERS_LISTENING = false;
	public static bool GAME_START = false;
	public int catchUpSeconds = 0;
	
	public int lastSecond = 0;
	public static int monstersListening = 0;
	public static int REST_MULTIPLIER = 1;

	public Light sun;
	public float secondsInFullDay = 120f;
	[Range(0,1)]
	public float currentTimeOfDay = 0;
	[HideInInspector]
	public float timeMultiplier = 1f;
	
	float sunInitialIntensity;
	
	void Start() {
	}
	


	public GameTimer()
	{
	}
	public void Awake() {
		lastTick = Time.time;
		if (REF == null) {
			DontDestroyOnLoad(this);
			REF = this;
		} else {
			Destroy (this.gameObject);
		}
	}


	public void OnApplicationFocus(bool aHasFocus) {
		if(aHasFocus) {
			if(lastSecond>0) {
				DateTime millenium = new DateTime(2000,1,1);
				millenium = millenium.AddSeconds(lastSecond);
				int secondsSinceMillenium = Convert.ToInt32((DateTime.Now-millenium).TotalSeconds);
				if(secondsSinceMillenium>20||Application.loadedLevelName!="WorldViewer") {
					if(WorldExplorer.REF.inBattle||Application.loadedLevelName == "BattleSceneA" || Application.loadedLevelName == "MainMenu" || Application.loadedLevelName == "BattleSceneMultiplayer") {
					 
					} else {
						if(!NPCManager.CONVO_OPEN) {
							this.catchUpSeconds = secondsSinceMillenium;
							// Reset the user to ranch location.
							AvatarMover.RESET_TO_RANCH_POS = true;
						}
					}
				
				}
			}
		} else {
		//	SaveGameUtils.REF.SaveStatsAndQuests();
			DateTime millenium = new DateTime(2000,1,1);
			int secondsSinceMillenium = Convert.ToInt32((DateTime.Now-millenium).TotalSeconds);
			this.lastSecond = secondsSinceMillenium;
		}

	}
	void UpdateSun() {
		if(sun==null) {
			GameObject g = GameObject.FindGameObjectWithTag("MainLight");
			if(g!=null) sun = g.GetComponent<Light>();
			if(sun!=null)
				sunInitialIntensity = sun.intensity;
			return;
		}
		sun.transform.localRotation = Quaternion.Euler((currentTimeOfDay * 360f) - 90, 170, 0);
		
		float intensityMultiplier = 1;
		if (currentTimeOfDay <= 0.23f || currentTimeOfDay >= 0.75f) {
			intensityMultiplier = 0.125f;
		}
		else if (currentTimeOfDay <= 0.25f) {
			intensityMultiplier = Mathf.Clamp01((currentTimeOfDay - 0.23f) * (1 / 0.02f));
		}
		else if (currentTimeOfDay >= 0.73f) {
			intensityMultiplier = Mathf.Clamp01(1 - ((currentTimeOfDay - 0.73f) * (1 / 0.02f)));
		}
		
		sun.intensity = sunInitialIntensity * intensityMultiplier;
	}

	private void progressDay() {
		RenderSettings.skybox.color = sbColor;
		if(this.sun==null) {
			GameObject l = GameObject.FindGameObjectWithTag("MainLight");
			if(l!=null) {
				this.sun = l.GetComponent<Light>();
			}
		} else {
			this.UpdateSun();
			

			// 0 = midnight
			// There are 36000 * 24 seconds in a real day
			// Each fifthsOfSecondInADay = 86400/fifthsOfSecondInADay seconds
			// 1/2 fifths of second in day = midday
			/*int actualSecondThroughDay = (int) (86400/fifthsOfSecondInDay*timeOfDay);
			if(actualSecondThroughDay>86400) {
				timeOfDay -= fifthsOfSecondInDay;
				daysGone++;
			}
			int hoursThroughDay = (int) actualSecondThroughDay/3600;
			actualSecondThroughDay -= hoursThroughDay*3600;
			int minutesThroughDay = (int) actualSecondThroughDay/60;
			Debug.Log ("Time is: "+hoursThroughDay+":"+minutesThroughDay+" On Day: "+daysGone);*/
			
		} 
	}
	private void onTick(float aTime) {

		lastTick = aTime;
		// invoke the subscribed event-handler(s)
		OnTimerTick();  
		int returnCount = 0;
		if(MonsterWithClock.returningToPartyMonsters.size>0) {
			BetterList<string> bl = MonsterWithClock.returningToPartyMonsters;
			string s = "";
			for(int i = 0;i<bl.size;i++) {
				s+=bl[i];
				returnCount += 1;
				if(i<bl.size-1) {
					s+= ", ";
				}
			}
			if(!GAME_START) {
				if(s.Length>0) {
					if(returnCount==1) {
						s+= " Returns to your Party!";
					} else {
						s+= " Return to your Party!";
					}
					DialogueManager.ShowAlert(s);
					MonsterWithClock.returningToPartyMonsters = new BetterList<string>();
				}
			} else {
				MonsterWithClock.returningToPartyMonsters = new BetterList<string>();
				GAME_START = false;
			}
		}
	}
	public void Update()
	{

		float currentTime = Time.time;
		UpdateSun();
		
		currentTimeOfDay += (Time.deltaTime / secondsInFullDay) * timeMultiplier;
		
		if (currentTimeOfDay >= 1) {
			currentTimeOfDay = 0;
		} 
		
		
		if(currentTime-lastTick>1f) {
			if (OnTimerTick != null)
			{
				if(catchUpSeconds>1000) {
					catchUpSeconds = 1000;
				}
				while(catchUpSeconds>0&&MONSTERS_LISTENING) {
					REST_MULTIPLIER = catchUpSeconds;
				//	Debug.Log ("<color=orange>Catching up: "+monstersListening+"</color>");
					WAKE_ON_HEALED = true;
					onTick(currentTime);
					catchUpSeconds--;
					WAKE_ON_HEALED = false;
					catchUpSeconds = 0;
					REST_MULTIPLIER = 1;
				}
				onTick(currentTime);
				
			}
		}
	}


}

