// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Google2u;
using UnityEngine;


namespace Battles
{
		public class BattleInitTeam
		{
				public string battlesConversation;
				public string name;
				private ETeamControllerType _controlType;
				private BetterList<MonsterDataMain> monstersToUse = new BetterList<MonsterDataMain>();
				public BattleInitTeam ()
				{

				}
				/*
				public BattleInitTeam (SFSObject aBattleData)
				{
					if(aBattleData!=null) {
						this.name = aBattleData.GetUtfString("name");
						if(aBattleData.GetInt("id")==SmartfoxHandler.REF.userID) {
							controlType = ETeamControllerType.SinglePlayerUser;
						} else {
							controlType = ETeamControllerType.MultiplayerUser;
							SFSArray monstersArr = (SFSArray) aBattleData.GetSFSArray("monsters");
					
							this.name = aBattleData.GetUtfString("name");
							BattleBase.DebugText("BattleInitTeam->Making Monsters");
							for(int i = 0;i<monstersArr.Size();i++) {
								BattleBase.DebugText("BattleInitTeam->MakingMonster: "+i);
								MonsterDataMain m = new MonsterDataMain();
								if(monstersArr.GetSFSObject(i).ContainsKey("id")) {
									m.initFromSFSObject((SFSObject) monstersArr.GetSFSObject(i));
									monstersToUse.Add(m);
									m.ownersName = this.name;
								} else {
									monstersToUse.Add(null);
								}
							}
						}
					}
				}		
				*/
				public ETeamControllerType controlType {
					set {
						_controlType = value;
						if(_controlType==ETeamControllerType.SinglePlayerUser) {
							PlayerMain localPlayer = PlayerMain.REF;
							BetterList<MonsterDataMain> playersMonsters = localPlayer.battleMonsters;
							for(int i = 0;i<playersMonsters.size;i++) {
								if(playersMonsters[i]!=null) {
									playersMonsters[i].lingeringEffects.removePostBattleStatusEffects();
								}
							}
							monstersToUse = playersMonsters;

							this.name = PlayerMain.REF.name;
						}

					}
					get {
						return _controlType;
					}
					
				}
				
				public void initTeamFromBattlesRow(NPCBattlesRow aData,BetterList<NPCBattleMonstersRow> aMonsters) {
					for(int i = 0;i<aMonsters.size;i++) {
						MonsterLibraryRecord m = MonsterLibrary.REF.getMonster(aMonsters[i]._Monster);
						if(m!=null) {
							if(aData._NPCInBattleName.Length==0) {
								aData._NPCInBattleName = aData._NPCName;
							}
							MonsterDataMain monster = addNPCMonster(m.ID,Convert.ToByte(aMonsters[i]._Level),EMoveBranch.NoMove,aData._NPCInBattleName,aMonsters[i]._OverrideMove1,aMonsters[i]._OverrideMove2,aMonsters[i]._OverrideMove3,aMonsters[i]._OverrideMove4);
							if(aMonsters[i]._OverrideName!=null&&aMonsters[i]._OverrideName.Length>0) {
								monster.name = aMonsters[i]._OverrideName;
							}
							PlayerMain.REF.addMonsterToSeen(monster.monsterBreedRef.ID);
						} else {  
							Debug.LogError ("Monster that I wanted to add is: "+aMonsters[i]._Monster);
						}
					}
					this.name = aData._NPCName;
					battlesConversation = aData._ForcedConversation;
				}
		
				public BetterList<MonsterDataMain> monsters {
					get {
						return monstersToUse;
					}
				}

				public void loadFromSQL(int aBattleID) {
					
				}
				
				public void initTeamFromSpawnAreaMonster(SpawnAreaMonster aSpawnAreaMonster) {
					this.name  = "Wild";
					int levelDiff = UnityEngine.Random.Range(aSpawnAreaMonster.level-1,aSpawnAreaMonster.level+1);
					if(levelDiff<1) {
						levelDiff = 1;
					} 
					if(levelDiff>100) {  
						levelDiff = 100;
					}
					if(aSpawnAreaMonster.monster!=null) {
							addNPCMonster(aSpawnAreaMonster.monster.ID,Convert.ToByte(levelDiff),EMoveBranch.NoMove,"Wild","","","",""); 
							if(aSpawnAreaMonster.monster.companionA>0&&BattleRandomizer.random>0.5) {
								int lev = levelDiff+aSpawnAreaMonster.monster.companionALevelDiff;
								if(lev<1) {
									lev = 1;
								}
								if(lev>100) {
									lev = 100;
								}
								addNPCMonster(aSpawnAreaMonster.monster.companionA,Convert.ToByte(lev),EMoveBranch.NoMove,"Wild","","","",""); 
					
							}
							if(aSpawnAreaMonster.monster.companionB>0&&BattleRandomizer.random>0.5) {
							int lev = levelDiff+aSpawnAreaMonster.monster.companionALevelDiff;
							
							if(lev<1) {
								lev = 1;
							}
							if(lev>100) {
								lev = 100;
							}
					
								addNPCMonster(aSpawnAreaMonster.monster.companionB,Convert.ToByte(lev),EMoveBranch.NoMove,"Wild","","","",""); 
								
							}
				
						} else {
							Debug.Log ("No Monster here for spawn");
						}
				}
				public MonsterDataMain addNPCMonster (int aMonsterID,byte aMonsterLevel,EMoveBranch aMoveBranchBias,string aNPCName,string aOverrideMove1,string aOverrideMove2,string aOverrideMove3,string aOverrideMove4) {
					MonsterDataMain monster = new MonsterDataMain();
					monster.initMonster(aMonsterID,aMonsterLevel,true);
					monster.ownersName = aNPCName;
					monster.removePassiveEffects();
					if(aOverrideMove1.Length>0) {
						monster.doOverrideMoves(aOverrideMove1,aOverrideMove2,aOverrideMove3,aOverrideMove4);
					}
					monstersToUse.Add(monster);
				
					PlayerMain.REF.addMonsterToSeen(monster.monsterBreedRef.ID);
					return monster;
				}
				public void addFightingMonster(MonsterDataMain aMonsterMain,int aIndex,string aOwner) {
					Debug.Log("Adding monster to use: "+aMonsterMain.name+" Owner is: "+aOwner);
					aMonsterMain.ownersName = aOwner;
			
					PlayerMain.REF.addMonsterToSeen(aMonsterMain.monsterBreedRef.ID);
					if(monstersToUse[aIndex]!=null) {
						monstersToUse[aIndex+1] = monstersToUse [aIndex];
					}
					monstersToUse[aIndex] = aMonsterMain;
				}
		
				public void addFightingMonster(MonsterDataMain aMonsterMain,string aOwner) {
						aMonsterMain.ownersName = aOwner;
						Debug.Log("Adding monster to use: "+aMonsterMain.name+" Owner is: "+aOwner);
						for(int i = 0;i<monstersToUse.size;i++) {
							if(monstersToUse[i]==null) {
								monstersToUse[i] = aMonsterMain;
								return;
							}
						}
			
						PlayerMain.REF.addMonsterToSeen(aMonsterMain.monsterBreedRef.ID);
						monstersToUse.Add(aMonsterMain);
					}
				}
}

