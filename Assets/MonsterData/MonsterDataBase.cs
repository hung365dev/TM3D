// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using Battles;
using System;
using utils;
using System.Collections;

public class MonsterDataBase
{
	
	public delegate void Eventhandler(object sender, EventArgs args);  

	protected int _id = 0;
	protected string _name;
	private MonsterLibraryRecord _monsterBreed;
	protected int _ownerID = 0;
	private uint _xp = 0;
	private float _hp = 0;
	private float _meleeAttack = 0;
	private float _meleeDefense = 0;
	private float _rangeAttack = 0;
	private float _rangeDefense = 0;
	private float _speed = 0;
	private float _energy = 0;
	private float _accuracy = 0;
	private float _agility = 0;
	protected MoveTreeCompletionData _moveTreeA;
	protected MoveTreeCompletionData _moveTreeB;
	protected MoveTreeCompletionData _moveTreeC;
	protected MoveTreeCompletionData _moveTreeD;

	private int _resistance = 0;

	protected float _meleeAttackEV =0;
	protected float _meleeDefenseEV =0;
	protected float _rangeAttackEV =0;
	protected float _rangeDefenseEV =0;
	protected float _agilityEV =0;
	protected float _speedEV =0;
	protected float _accuracyEV =0;
	protected float _supportEV =0;
	
	protected float _meleeAttackEVInLevel =0;
	protected float _meleeDefenseEVInLevel =0;
	protected float _rangeAttackEVInLevel =0;
	protected float _rangeDefenseEVInLevel =0;
	protected float _agilityEVInLevel =0;
	protected float _speedEVInLevel =0;
	protected float _accuracyEVInLevel =0;
	protected float _supportEVInLevel =0;
	
	
	

	protected ERestingStatus _resting = ERestingStatus.Awake;
	protected int _lastUpdate = 0;

	protected bool _isWild = false;
	
	protected EMonsterPos _presetBattlePosition = EMonsterPos.Unset;
	private EMoveFlag _moveFlag = EMoveFlag.Idle;

	
	protected BetterList<PassiveEffect> _effects = new BetterList<PassiveEffect>();
	public delegate void OnChangedEvent(MonsterDataMain aMonster);
	
	
	public const float EV_DIVIDERVAL = 10f;
	
	public event OnChangedEvent LevelChanged; 
	public event OnChangedEvent Changed; 
	public event OnChangedEvent StatusChanged; 

	public float _support = 0f;
	public event OnChangedEvent onHPChanged; 
	
	private EOwnershipStatus _ownershipStatus;


	public virtual void FromString(string aString) {
	
		string s = Base64Compressor.Base64Decode(aString);
		char[] delimeter = new char[] {'|'};
		string[] split = s.Split(delimeter);
		try {
			_id = Convert.ToInt32(split[0]);
			_name = Base64Compressor.Base64Decode(split[1]);
			this.monsterBreedRef = MonsterLibrary.REF.getMonster(Convert.ToInt32(split[2]));
			_ownerID = Convert.ToInt32(split[3]);
			_xp = Convert.ToUInt32(split[4]);
			_hp = (float) Convert.ToDouble(split[5]);
			_meleeAttack = (float) Convert.ToDouble(split[6]);
			_meleeDefense = (float) Convert.ToDouble(split[7]);
			_rangeAttack = (float) Convert.ToDouble(split[8]);
			_rangeDefense = (float) Convert.ToDouble(split[9]);
			_speed = (float) Convert.ToDouble(split[10]);
			_energy = (float) Convert.ToInt32(split[11]);
			_accuracy = (float) Convert.ToDouble(split[12]);
			_agility = (float) Convert.ToDouble(split[13]);
		//	_support = Convert.ToInt32(split[14]);
			_resistance = Convert.ToInt32(split[15]);
			_meleeAttackEV = (float) Convert.ToDouble(split[16]);
			_meleeDefenseEV = (float) Convert.ToDouble (split[17]);
			_rangeAttackEV = (float) Convert.ToDouble(split[18]);
			_rangeDefenseEV = (float) Convert.ToDouble(split[19]);
			_agilityEV = (float) Convert.ToDouble (split[20]);
			_speedEV = (float) Convert.ToDouble(split[21]);
			_accuracyEV = (float) Convert.ToDouble(split[22]);
			_supportEV = (float) Convert.ToDouble(split[23]);
			_meleeAttackEVInLevel = (float) Convert.ToDouble(split[24]);
			_meleeDefenseEVInLevel = (float) Convert.ToDouble(split[25]);
			_rangeAttackEVInLevel = (float) Convert.ToDouble(split[26]);
			_rangeDefenseEVInLevel = (float) Convert.ToDouble (split[27]);
			_agilityEVInLevel = (float) Convert.ToDouble(split[28]);
			_accuracyEVInLevel = (float) Convert.ToDouble(split[29]);
			_supportEVInLevel = (float) Convert.ToDouble(split[30]);
			_resting = (ERestingStatus) Convert.ToInt32(split[31]);
			_lastUpdate = Convert.ToInt32(split[32]);
			this._ownershipStatus = (EOwnershipStatus) Convert.ToInt32(split[33]);
		} catch(Exception e) {
			Debug.LogWarning("Warning: "+e.ToString());
			reportBug(e.ToString());
			
		}
		try {
			if(split.Length>34) {
				this._moveTreeA.FromString(split[34]);
				if(split.Length>35) {
					this._moveTreeB.FromString(split[35]);
					if(split.Length>36) {
						this._moveTreeC.FromString(split[36]);
						if(split.Length>37) {
							_moveTreeD.FromString(split[37]);
						}
					}
				} else {
					Debug.LogError("No Split 35!");
				}
			} else {
				Debug.LogError("No Split 34!");
			}
		} catch(Exception e) {
			Debug.LogWarning("Warning: "+e.ToString());
			reportBug(e.ToString());
		}
	}
	private void reportBug(string aMessage) {
		WWW tWWW = new WWW("http://www.blueomega.me/recordBug.php?bug="+aMessage);

	}
	
	public void convertToWild() {
		this._isWild = false;
		ownershipStatus = EOwnershipStatus.Wild;
	}
	
	public virtual ERestingStatus restingStatus {
		get {
			return _resting;
		}
		set {
			_resting = value;
		}
	}
	public void evolve() {
		if((_monsterBreed.evolvesTo!=null)&&(_monsterBreed.evolvesTo.Name!="No Creature"))
			this._monsterBreed = this._monsterBreed.evolvesTo;
	}
	public override string ToString ()
	{
		int restingValue = (int) _resting;
		int ownerStatus = (int) _ownershipStatus;
		if(_name == null) {
			_name = "";
		}

		string s = _id.ToString()+"|"+Base64Compressor.Base64Encode(this._name)+"|"+_monsterBreed.ID.ToString()+"|"+_ownerID+"|"+_xp.ToString()+"|"+_hp.ToString()
			+"|"+_meleeAttack.ToString()+"|"+_meleeDefense.ToString()+"|"+_rangeAttack.ToString()+"|"+rangeDefense.ToString()+"|"+_speed.ToString()+"|"+_energy.ToString()+"|"+
				_accuracy.ToString()+"|"+_agility.ToString()+"|"+_support.ToString()+"|"+_resistance.ToString()+"|"+_meleeAttackEV.ToString()+"|"+_meleeDefenseEV.ToString()+"|"+
				_rangeAttackEV.ToString()+"|"+_rangeDefenseEV.ToString()+"|"+_agilityEV.ToString()+"|"+_speedEV.ToString()+"|"+_accuracyEV.ToString()+"|"+_supportEV.ToString()+"|"+
				_meleeAttackEVInLevel.ToString()+"|"+_meleeDefenseEVInLevel.ToString ()+"|"+_rangeAttackEVInLevel.ToString()+"|"+_rangeDefenseEVInLevel.ToString()+"|"+_agilityEVInLevel.ToString()+"|"+
				_accuracyEVInLevel.ToString()+"|"+_supportEVInLevel.ToString()+"|"+restingValue+"|"+_lastUpdate+"|"+ownerStatus;
		
		if(_moveTreeA!=null) {
			s+="|"+_moveTreeA.ToString();
			
			if(_moveTreeB!=null) {
				s+="|"+_moveTreeB.ToString();
				if(_moveTreeB.pointsUsed==0) {
			//		Debug.LogError("Saving and move tree B length is now 0");
				}
				if(_moveTreeC!=null) {
					s+="|"+_moveTreeC.ToString();
					
					if(_moveTreeD!=null) {
						s+="|"+_moveTreeD.ToString();
					}
				}
				
			} else {
				Debug.LogError("This monster has no move tree B");
			}
		}
		return Base64Compressor.Base64Encode(s);
	}
	
	public float hp {
		get {
			return (float) Math.Floor(this._hp);
		}
		set {
			if(value>this.MaxHP) {
				value = this.MaxHP;
			}
			this._hp = value;
		}
	}
	
	public float energy {
		get {
			return this._energy;
		}
		set {
			value = (float) Math.Floor(value);
			this._energy = value;
			if(_energy>this.MaxEnergy) {
				_energy = MaxEnergy;
			}
		}
	}
	public EMonsterPos battlePosition {
		get {
			return this._presetBattlePosition;
		}
		set { 
			this._presetBattlePosition = value;
		}
	}
/*
	public virtual void initFromSFSObject(SFSObject aInitObject) {
		this._name = aInitObject.GetUtfString("name");
		BattleBase.MultiplayerDebugText("Loading Monster: "+this._name);
		this._id = aInitObject.GetInt("id");
		this._ownersName = aInitObject.GetUtfString ("ownersName");
		this._ownerID = aInitObject.GetInt("owner");
		this._monsterBreed = MonsterLibrary.REF.getMonster(aInitObject.GetInt("monsterRef"));
		this._xp = (uint) aInitObject.GetLong("xp");
		this._hp = aInitObject.GetFloat("hp");
		this._meleeAttack = aInitObject.GetFloat("meleeAttack");
		this._meleeDefense = aInitObject.GetFloat("meleeDefense");
		this._rangeAttack = aInitObject.GetFloat("rangeAttack");
		this._rangeDefense = aInitObject.GetFloat("rangeDefense");
		this._speed = aInitObject.GetFloat("speed");
		this._energy = aInitObject.GetFloat("energy");
		this._accuracy = aInitObject.GetFloat("accuracy");
		this._agility = aInitObject.GetFloat("agility");
		string statusEffects = aInitObject.GetUtfString("statusEffects");
		this._resistance = aInitObject.GetInt("resistance");
		this._meleeAttackEV = aInitObject.GetFloat("meleeAttackEV");
		this._meleeDefenseEV = aInitObject.GetFloat("meleeDefenseEV");
		this._rangeAttackEV = aInitObject.GetFloat("rangeAttackEV");
		this._rangeDefenseEV = aInitObject.GetFloat("rangeDefenseEV");
		this._speedEV = aInitObject.GetFloat("speedEV");
		this._accuracyEV = aInitObject.GetFloat("accuracyEV");
		SFSArray arr = (SFSArray) aInitObject.GetSFSArray("passiveEffects");
		if(_effects.size==0) {
			_effects = new BetterList<PassiveEffect>();
			for(int i = 0;i<arr.Size();i++) {
				int passiveEffectID = arr.GetInt(i);
				BattleBase.DebugText("Passive move for monster is: "+passiveEffectID+" ("+i+")");
				_effects.Add (PassiveEffectLibrary.REF.getPassiveEffect(passiveEffectID));
			}
		}
	}
	
	public virtual SFSObject toSFSObject(SFSObject aAddToThis) {
		if(aAddToThis==null) {
			aAddToThis = new SFSObject();
		}
		aAddToThis.PutUtfString("name",this._name);
		aAddToThis.PutInt("id",this._id);
		aAddToThis.PutInt("owner",this._ownerID);
		aAddToThis.PutInt("monsterRef",this._monsterBreed.ID);
		aAddToThis.PutUtfString ("ownersName", this._ownersName);
		aAddToThis.PutLong("xp",(long) this._xp);
		aAddToThis.PutFloat("hp",this._hp);
		aAddToThis.PutFloat("meleeAttack",this._meleeAttack);
		aAddToThis.PutFloat("meleeDefense",this._meleeDefense);
		aAddToThis.PutFloat("rangeAttack",this._rangeAttack);
		aAddToThis.PutFloat("rangeDefense",this._rangeDefense);
		aAddToThis.PutFloat("speed",this._speed);
		aAddToThis.PutFloat("energy",this._energy);
		aAddToThis.PutFloat("accuracy",this._accuracy);
		aAddToThis.PutFloat("agility",this._agility);
		//TODO - Multiplayer status effects
		aAddToThis.PutInt("resistance",this._resistance);
		aAddToThis.PutFloat("meleeAttackEV",this._meleeAttackEV);
		aAddToThis.PutFloat("meleeDefenseEV",this._meleeDefenseEV);
		aAddToThis.PutFloat("rangeAttackEV",this._rangeAttackEV);
		aAddToThis.PutFloat("rangeDefenseEV",this._rangeDefenseEV);
		aAddToThis.PutFloat("accuracyEV",this._accuracyEV);
		aAddToThis.PutFloat("agilityEV",this._agilityEV);
		aAddToThis.PutFloat("speedEV",this._speedEV);
		
		SFSArray arr = new SFSArray();
		for(int i = 0;i<_effects.size;i++) {
			
			int passiveEffectID = _effects[i].id;
			
			BattleBase.DebugText("Sending passive effect: "+passiveEffectID);
			arr.AddInt(passiveEffectID);
		}
		aAddToThis.PutSFSArray("passiveEffects",arr);
		return aAddToThis;
	}
	*/
	private void initStatValues() {
		this._meleeAttack = this.monsterBreedRef.MeleeAttackAtLevel(this.level);
		this._meleeDefense = this.monsterBreedRef.MeleeDefenseAtLevel(this.level);
		this._rangeAttack = this.monsterBreedRef.RangeAttackAtLevel(this.level);
		this._rangeDefense = this.monsterBreedRef.RangeDefenseAtLevel(this.level);
		this._speed = this.monsterBreedRef.SpeedAtLevel(this.level);
		this._accuracy = this.monsterBreedRef.AccuracyAtLevel(this.level);
		this._agility = (float) Convert.ToDouble(this.monsterBreedRef.AgilityAtLevel(this.level));
	}
	
	public string name {
		get {
			if(_name==null||_name.Length==0) {
				return this._monsterBreed.Name;
			}
			return _name;
		}
		set {
			_name = value;
		}
	}
	public ElementalType elementType {
		get {
			return this.monsterBreedRef.PrimaryElement;
		}
	}
	
	public ElementalType secondaryType {
		get {
			return this.monsterBreedRef.SecondaryElement;
		}
	}
	public float accuracy {
		get {
			if(this._accuracy==0f) {
				initStatValues();
			}
			return (float) Math.Round(this._accuracy+this._accuracyEV/EV_DIVIDERVAL);
		}
	}
	public float rangeAttack {
		get {
			if(this._rangeAttack==0f) {
				initStatValues();
			}
			return (float) Math.Round(this._rangeAttack+this._rangeAttackEV/EV_DIVIDERVAL);
		}
	}
	public float meleeAttack {
		get {
			if(this._meleeAttack==0f) {
				initStatValues();
			}
			return (float) Math.Round(this._meleeAttack+this._meleeAttackEV/EV_DIVIDERVAL);
		}
	}
	
	public float rangeDefense {
		get {
			if(this._rangeDefense==0f) {
				initStatValues();
			}
			return (float) Math.Round(this._rangeDefense+this._rangeDefenseEV/EV_DIVIDERVAL);
		}
	}
	public float meleeDefense {
		get {
			if(this._meleeDefense==0f) {
				initStatValues();
			}
			return (float) Math.Round(this._meleeDefense+this._meleeDefenseEV/EV_DIVIDERVAL);
		}
	}
	public float speed {
		get {
			if(this._speed==0f) {
				this.initStatValues();
			}
			return (float) Math.Round(this._speed+this._speedEV/EV_DIVIDERVAL);
		}
	}
	public float agility {
		get {
			if(this._agility==0f) {
				this.initStatValues();
			}
			return (float) Math.Round(this._agility+this._agilityEV/EV_DIVIDERVAL);
		}
	}
	
	public GameObject prefab {
		get {
			
			GameObject prefab = Resources.Load("Monsters/"+this._monsterBreed.Name+"") as GameObject;

			if(prefab==null)
			{
				prefab = Resources.Load("Monsters/"+this._monsterBreed.Name+"") as GameObject;
				if(prefab==null) {
					Debug.LogError("Prefab for "+this._monsterBreed.Name+" is null");
					prefab = Resources.Load("Monsters/Dandylion") as GameObject;
					
				}
			}
			Resources.UnloadUnusedAssets();
			return prefab;
		}
	}
	private string _ownersName = "";
	public string ownersName {
		get {
			if(_ownersName!=null&&_ownersName.Length>0) {
				return _ownersName;
			}
			return PlayerMain.REF.name;
		}
		set {
			_ownersName = value;
		}
	}
	public EOwnershipStatus ownershipStatus {
		get {
			return _ownershipStatus;
		}
		set {
			if(value==EOwnershipStatus.Wild) {
				_isWild = true;
			}
			_ownershipStatus = value;
		}
	}
	
	public EMonsterPos  monsterBattlePosition {
		get {
			return _presetBattlePosition;
		}
	}
	protected virtual void OnChanged()    // the Trigger. Foo calls this to raise the event
	{
		// make a copy to be more thread-safe
		OnChangedEvent handler = Changed;   
		
		if (handler != null) {
			// invoke the subscribed event-handler(s)
			handler((MonsterDataMain) this);  
		}
	}
	protected virtual void OnStatusChanged()    // the Trigger. Foo calls this to raise the event
	{
		// make a copy to be more thread-safe
		OnChangedEvent handler = StatusChanged;   
		
		if (handler != null) {
			// invoke the subscribed event-handler(s)
			handler((MonsterDataMain) this);  
		}
	}

	private uint[] xpLevels {
		get {
			MonsterLibraryRecord m = monsterBreedRef;
			if(m == null) {
				Debug.LogWarning("xpLevels->get could not get monsterBreedRef");
			}
			XPDevModel xpDev = m.xpDevModel;
			uint[] levels = xpDev.Levels;
			return levels;
		}
	}

	public byte evolutionLevel {
		get {
			return this.monsterBreedRef.evolutionLevel;
		}
	}
	public virtual byte level {
			get {
				uint[] levels = xpLevels;
				for(byte i = 0; i < levels.Length ; i++) {
				if(levels[i]>this._xp) {
						return i;
					}
				}
				return 100;

			}
			
			set {
				uint[] levels = xpLevels;
				this._xp = levels[value];
			}
		}
	public float XPAsPercentage
	{
		get {
			if(level<100)
			{
				uint currentXPInLevel = _xp-xpLevels[level-1];
				uint totalXPToNext = xpLevels[level]-xpLevels[level-1];
				
				return (float) ((float) currentXPInLevel/ (float) totalXPToNext);
			}
			else
			{
				return 0;
			}
		}
	}
	public uint XpToNext()
	{
		if(level<100)
		{
			return xpLevels[level]-_xp; 
		}
		else
		{
			return 0;
		}
	}
	
	
	/*
		
		Function: percentageToNext()
		
		What percent up to the next level is this creature?
		
		Parameters:
		
		Returns:
		
		integer value indicating xp to next level
		
		*/
	public float PercentageToNext
	{
		get {

			if(level<101)
			{
				float left = (xpLevels[level]-xpLevels[level-1]);
				float right = (_xp-xpLevels[level-1]); 
				return right/left;
			}
			else
			{
				return 0;
			}
		}
	}
	
	public float energyAsPercentage {
		get {
			return this._energy/this.MaxEnergy;
		}
	}
	public float HpAsPercentage
	{ 
		get {
			return this._hp/this.MaxHP;
		}
	}
	public int MaxEnergy {
		get {
			return (int) this._monsterBreed.EnergyAtLevel(this.level);
		}
	}
	
	public int FullyMaxXP {
		get {
			return (int) this._monsterBreed.xpDevModel.Levels[99];
		}
	}
	public int MaxHP {
		get {
			return (int) this._monsterBreed.HpAtLevel(this.level);
		}
	}
	/*
		
		Function: creatureLibraryData()
		
		What percent up to the next level is this creature?
		
		Parameters:
		
		Returns:
		
		integer value indicating xp to next level
		
		*/
	public virtual MonsterLibraryRecord monsterBreedRef
	{ 
		get {
			return this._monsterBreed;
		}
		set {

			this._monsterBreed = value;
		
			_moveTreeA = new MoveTreeCompletionData(_monsterBreed.moveTreeA);
			if(_monsterBreed.moveTreeB!=null)
				_moveTreeB = new MoveTreeCompletionData(_monsterBreed.moveTreeB);
			
			if(_monsterBreed.moveTreeC!=null)
				_moveTreeC = new MoveTreeCompletionData(_monsterBreed.moveTreeC);

			
			if(_monsterBreed.moveTreeD!=null)
				_moveTreeD = new MoveTreeCompletionData(_monsterBreed.moveTreeD);



		}
	}
	

	public void addXP(float aXpToAdd)
	{ 
		uint lastXP = this._xp;
		uint xpToAdd = (uint) aXpToAdd;
		uint newXP = this._xp + xpToAdd;
		byte currentLevel = this.level;
		if(newXP>this.FullyMaxXP)
		{ 
			newXP = (uint) this.FullyMaxXP;
		}
		
		if(newXP!=lastXP)
		{
			this._xp = newXP;
			if(level!=currentLevel) {
				if(this.LevelChanged!=null) {
					this.LevelChanged((MonsterDataMain) this);
				}
				// Reset all EV's in level
				this._meleeDefenseEVInLevel = 0f;
				this._meleeAttackEVInLevel = 0f;
				this._rangeAttackEVInLevel = 0f;
				this._rangeDefenseEVInLevel = 0f;
				this._accuracyEVInLevel = 0f;
				this._agilityEVInLevel = 0f;
				
				this._meleeDefense += this._monsterBreed.meleeDefensePerLevel;
				this._meleeAttack += this._monsterBreed.meleeAttackPerLevel;
				this._rangeDefense += this._monsterBreed.rangeDefensePerLevel;
				this._rangeAttack += this._monsterBreed.rangeAttackPerLevel;
				this._agility += this._monsterBreed.agilityPerLevel;
				this._accuracy += this._monsterBreed.accuracyPerLevel;
				this._speed += this._monsterBreed.speedPerLevel;
			}
		}
		
	}

	public uint MaxXP
	{
		get {
			return this.xpLevels[xpLevels.Length-1];
		}
	}
	public uint Xp
	{ 
		set {
			uint oldXP = _xp;
			float oldPercent = this.PercentageToNext;
			byte lastLevel = this.level;
			uint newXP = value;
			_xp= value;
			byte newLevel = this.level;

		}
		get {
			return _xp;		
		}
	}
}

