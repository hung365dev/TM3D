// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Ranchview;
using Battles;
using System.Collections;
using PixelCrushers.DialogueSystem;
using Utils;
using PixelCrushers.DialogueSystem.NGUI;
using utils;


	public class RanchviewController : MonoBehaviour
	{
		public UIGrid leftBattlePos;
		public UIGrid middleBattlePos;  
		public UIGrid rightBattlePos;
		
	
		public UILabel boxLabel;
		public RanchviewMonsterItem monsterItemTemplate;
		public UITable table;
		public UIScrollView scrollView;
		
		public UIWidget middlePanel;
		private int _lastTableCount = 0;
		private int _currentFront = 100093;
		private int _tableUpdates = 2;
		private int _startInit = 2;
		
		private bool _rightBattlePos = false;
		private bool _middleBattlePos = false;
		private bool _leftBattlePos = false;
		
		public int pageNumber = 0;
		public const int MONSTERS_PER_PAGE = 8;
		public const int MAX_PAGES = 20;
		public GameObject arrowToRestMonster;
		public UILabel monstersCaught;
		public UILabel battlesWon;
		public UILabel multiplayerBattlesWon;
		public RanchviewController ()
		{
		}
		public void OnDestroy() {
		//	SaveGameUtils.REF.SaveStatsAndQuests();
			PlayerMain.REF.saveMonsters();
		}
		public void Awake() {
			if(PlayerMain.REF==null) {
				Application.LoadLevel("InitGameScene");
				return;
			}
			UIButton rightBtn = GameObject.Find("BoxGoRight").GetComponent<UIButton>();
			rightBtn.onClick.Add(new EventDelegate(this,"onGoRightPage"));
			UIButton leftBtn = GameObject.Find("BoxGoLeft").GetComponent<UIButton>();
			leftBtn.onClick.Add(new EventDelegate(this,"onGoLeftPage"));
		/*	leftGridController.onChanged += onLeftMonsterChanged;
			middleGridController.onChanged += onMiddleMonsterChanged;
			rightGridController.onChanged += onRightMonsterChanged;
			
			
			leftGridController.onLost += onLeftMonsterLost;
			middleGridController.onLost += onMiddleMonsterLost;
			rightGridController.onLost += onRightMonsterLost;*/
			showMonsters(null);
			StartCoroutine(startTutorialConversation());
			updateStats();
		}
		public void onFullHealUsed() {
		//	AlertGUI.REF.DoFullRanchHeal("");
		}
		protected IEnumerator startTutorialConversation() {
			yield return new WaitForSeconds(0.5f);
			if(GameObject.FindGameObjectWithTag("DialogueManager")!=null) {
				ConversationTrigger c = GameObject.FindGameObjectWithTag("UIRoot").GetComponent<ConversationTrigger>();
				c.conversation = "Resting Tutorial";
				c.OnUse ();
				GameObject g = GameObject.Find("NGUIDialogue 1");
				NGUIDialogueUI ds = g.GetComponent<NGUIDialogueUI>();
				ds.OnContinue();
				ds.dialogue.npcSubtitle.panel.gameObject.SetActive(true);
				yield return new WaitForSeconds(0.1f);
				GameObject npcPan = ds.dialogue.npcSubtitle.panel.gameObject;
				yield return new WaitForSeconds(0.1f);
				npcPan.gameObject.SetActive(true);
				int children = npcPan.transform.childCount;
				for(int i = 0;i<children;i++) {
					GameObject thisChild = npcPan.transform.GetChild(i).gameObject;
					
					thisChild.SetActive(true);
					for(int i2 = 0;i2<thisChild.transform.childCount;i2++) {
						thisChild.transform.GetChild(i2).gameObject.SetActive(true);
					}
				}
			}
		}
		public void onGoLeftPage() {
			pageNumber--;
			if(pageNumber<0) {
				pageNumber = MAX_PAGES;
			}
			StartCoroutine(spreadCreation (pageNumber));
		}
		public void onGoRightPage() {
			pageNumber++;
			if(pageNumber>MAX_PAGES) {
				pageNumber = 0;
			}
			StartCoroutine(spreadCreation (pageNumber));
		}
		public void onExitToWorld() {
			Application.LoadLevel("MapChangeSplashScreen");
		}
		public void onAllElements() {
			showMonsters(null);
		}
	
		public void onAirElements() {
			showMonsters(ElementalLibrary.REF.getElement("Air"));
		}
		public void onEarthElements() {
			showMonsters(ElementalLibrary.REF.getElement("Earth"));
		}
		public void onElectricElements() {
			showMonsters(ElementalLibrary.REF.getElement("Electric"));
		}
		public void onFireElements() {
			showMonsters(ElementalLibrary.REF.getElement("Fire"));
		}
		public void onArcaneElements() {
			showMonsters(ElementalLibrary.REF.getElement("Arcane"));
		}
		public void onIceElements() {
			showMonsters(ElementalLibrary.REF.getElement("Ice"));
		}
		public void onWaterElements() {
			showMonsters(ElementalLibrary.REF.getElement("Water"));
		}
		
		private void clearTable() {
			
			for(int i = 0;i<table.GetChildList().Count;i++) {
				Destroy(table.GetChildList()[i].gameObject);
			}
			
			GameObject[] allRemaining = GameObject.FindGameObjectsWithTag("RanchviewMonsterItem");
			for(int i =0;i<allRemaining.Length;i++) {
				Destroy (allRemaining[i]);
			}
			table.GetChildList().RemoveRange(0,table.GetChildList().Count);
			table.GetChildList().Clear();
			
		}
		private void showMonsters(ElementalType aElementType) {
			StartCoroutine(spreadCreation (0));
			
	}
		private IEnumerator spreadCreation(int aBox) {
			_tableUpdates = 2;
			_startInit = 2;
			boxLabel.text = Convert.ToString(aBox+1);
			PlayerMain.REF.reorganizeMonsters();
			BetterList<MonsterDataMain> allMonsters;
			allMonsters = PlayerMain.REF.monstersForBox(aBox);
			BetterList<MonsterDataMain> battleMonsters = PlayerMain.REF.battlePositions;
			clearTable();
			int countToMake = 0;
			int startPlace = MONSTERS_PER_PAGE*aBox+3;
			
			for(int i = 0;i<allMonsters.size;i++) {
				if(allMonsters[i]!=null) {
					
						GameObject go = NGUITools.AddChild(table.gameObject, this.monsterItemTemplate.gameObject);
						UIDragDropItem item = go.GetComponent<UIDragDropItem>();
						UISprite s = go.GetComponent<UISprite>();
						s.depth = 1;
						UIDragDropContainer container = go.GetComponent<UIDragDropContainer>();
						container.reparentTarget = table.gameObject.transform;
				
			//			go.transform.position.Set(i*200f,0.0f,0.0f);
						item.gameObject.transform.parent = table.gameObject.transform;
						
						go.name = (i+100100)+"%"+allMonsters[i].name;
						RanchviewMonsterItem m = go.GetComponent<RanchviewMonsterItem>();
						m.init(allMonsters[i],startPlace);
						
					} else {
						GameObject go = NGUITools.AddChild(table.gameObject, this.monsterItemTemplate.gameObject);
						UIDragDropItem item = go.GetComponent<UIDragDropItem>();
						UIDragDropContainer container = go.GetComponent<UIDragDropContainer>();
						container.reparentTarget = table.gameObject.transform;
						UISprite s = go.GetComponent<UISprite>();
						s.depth = 1;
						//			go.transform.position.Set(i*200f,0.0f,0.0f);
						item.gameObject.transform.parent = table.gameObject.transform;
						
						go.name = (i+100100)+"%EmptySpace"+startPlace;
						RanchviewMonsterItem m = go.GetComponent<RanchviewMonsterItem>();
						m.init(allMonsters[i],startPlace);
					}
					startPlace++;
				}
			for(int i = 0;i<battleMonsters.size;i++) {
				if(i==1) {
					_leftBattlePos = true;
					
					GameObject go = NGUITools.AddChild(this.leftBattlePos.gameObject, this.monsterItemTemplate.gameObject);
					UISprite s = go.GetComponent<UISprite>();
					s.depth = 1;
					UIDragDropItem item = go.GetComponent<UIDragDropItem>();
					UIDragDropContainer container = go.GetComponent<UIDragDropContainer>();
					container.reparentTarget = leftBattlePos.gameObject.transform;
					
				
					go.name = (i+10096)+"%"+nameFromMonster(battleMonsters[i]);
					RanchviewMonsterItem m = go.GetComponent<RanchviewMonsterItem>();
					m.init(battleMonsters[i],i);
				}
				if(i==0) {
					_middleBattlePos = true;
					GameObject go = NGUITools.AddChild(this.middleBattlePos.gameObject, this.monsterItemTemplate.gameObject);
					UIDragDropItem item = go.GetComponent<UIDragDropItem>();
					UISprite s = go.GetComponent<UISprite>();
					UIDragDropContainer container = go.GetComponent<UIDragDropContainer>();
					container.reparentTarget = middleBattlePos.gameObject.transform;
					
				
					s.depth = 1;
					go.name = (i+10095)+"%"+nameFromMonster(battleMonsters[i]);
					RanchviewMonsterItem m = go.GetComponent<RanchviewMonsterItem>();
					m.init(battleMonsters[i],i);
				}
				if(i==2) {
					_rightBattlePos = true;
					GameObject go = NGUITools.AddChild(this.rightBattlePos.gameObject, this.monsterItemTemplate.gameObject);
					UISprite s = go.GetComponent<UISprite>();
					UIDragDropContainer container = go.GetComponent<UIDragDropContainer>();
					container.reparentTarget = rightBattlePos.gameObject.transform;
					
				
					s.depth = 1;
					UIDragDropItem item = go.GetComponent<UIDragDropItem>();
					go.name = (i+10094)+"%"+nameFromMonster(battleMonsters[i]);
					RanchviewMonsterItem m = go.GetComponent<RanchviewMonsterItem>();
					m.init(battleMonsters[i],i);
				}
			}
				

			table.columns = 4;
			table.Reposition();
			_lastTableCount = -1000;
			_tableUpdates = 3;
			scrollView.transform.localPosition = new Vector3(0.0f,10.0f,0.0f);
			yield return new WaitForEndOfFrame();
		}
		private string nameFromMonster(MonsterDataMain aMonster) {
			if(aMonster==null) {
				return "Empty";
			} else {
				return aMonster.name;
			}
		}
		void Update() {
			Lua.Result l = DialogueLua.GetQuestField("Resting_your_Monsters","State");
			if(l.AsString=="success"||l.AsString=="done") {
				this.arrowToRestMonster.gameObject.SetActive(false);
			} else {
				this.arrowToRestMonster.gameObject.SetActive(true);
			}
		
			if(this._startInit>0) {
				this._startInit--;
				for(int i = 0;i<table.GetChildList().Count;i++) {
					GameObject go = table.GetChildList()[i].gameObject;
					UIWidget widget = go.GetComponent<UIWidget>();
					widget.width = (int) this.middlePanel.width;
					widget.height = (int) this.middlePanel.height;
				}
				if(leftBattlePos.GetChildList().Count>0) {
					GameObject go = leftBattlePos.GetChild(0).gameObject;
					UIWidget widget = go.GetComponent<UIWidget>();
					widget.width = (int) this.middlePanel.width;
					widget.height = (int) this.middlePanel.height;
				}
				if(rightBattlePos.GetChildList().Count>0) {
					GameObject go = rightBattlePos.GetChild(0).gameObject;
					UIWidget widget = go.GetComponent<UIWidget>();
					widget.width = (int) this.middlePanel.width;
					widget.height = (int) this.middlePanel.height;
				}
			
				if(middleBattlePos.GetChildList().Count>0) {
					GameObject go = middleBattlePos.GetChild(0).gameObject;
					UIWidget widget = go.GetComponent<UIWidget>();
					widget.width = (int) this.middlePanel.width;
					widget.height = (int) this.middlePanel.height;
				}
			
			}
			if(_tableUpdates>0) {
				table.columns = (int) System.Math.Ceiling((double) table.GetChildList().Count/2);
			
				table.Reposition();
				_tableUpdates--;
			}
		}
		private void updateTable() {
			
			table.Reposition();
			updateStats();
		}
		
		private void updateStats() {
			this.monstersCaught.text = PlayerMain.REF.caughtMonsters.ToString();
			Lua.Result r = DialogueLua.GetVariable("WildBattlesWon");
			Lua.Result n = DialogueLua.GetVariable("NPCBattlesWon");
			
			this.battlesWon.text = Convert.ToString(r.AsInt+n.AsInt);
			Lua.Result mp = DialogueLua.GetVariable("MultiplayerBattlesWon");
			
			this.multiplayerBattlesWon.text = Convert.ToString(mp.AsInt); 
			//	this.multiplayerBattlesWon.text = "0";
			//}
		}
		
		private void moveMonsterToStart(GameObject aGameObject,MonsterDataMain aMonster) {
			string currentName = aGameObject.name;
			int percentSign = currentName.IndexOf("%");
			PlayerMain.REF.moveMonsterToFront(aMonster);
			string tempName = aGameObject.name.Substring(percentSign+1);
			string newName = _currentFront+"%"+tempName;
			aGameObject.name = newName;
			//Debug.Log (nameArray);
			_currentFront--;
			
		}
		private void onLeftMonsterChanged(GameObject aGameObject) {
			Debug.Log ("Left Monster Changed: "+aGameObject);
			moveMonsterToStart(aGameObject,aGameObject.GetComponent<RanchviewMonsterItem>().monster);
			updateTable();
		                                
		}
		
		private void onMiddleMonsterChanged(GameObject aGameObject) {
			Debug.Log ("Middle Monster Changed: "+aGameObject);
			moveMonsterToStart(aGameObject,aGameObject.GetComponent<RanchviewMonsterItem>().monster);
			updateTable();
			
		}
	
		private void onRightMonsterChanged(GameObject aGameObject) {
			Debug.Log ("Right Monster Changed: "+aGameObject);
			moveMonsterToStart(aGameObject,aGameObject.GetComponent<RanchviewMonsterItem>().monster);
			updateTable();
			
		}
	private void onLeftMonsterLost(GameObject aGameObject) {
			Debug.Log ("Left Monster Lost: "+aGameObject);
			updateTable();
		
		}
	
		private void onMiddleMonsterLost(GameObject aGameObject) {
			Debug.Log ("Middle Monster Lost: "+aGameObject);
			updateTable();
			
		}
		
		private void onRightMonsterLost(GameObject aGameObject) {
			Debug.Log ("Right Monster Lost: "+aGameObject);
			updateTable();
			
		}
	}

