// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using PixelCrushers.DialogueSystem;
using System.Collections;

public class AdvancedNPCDisappearer : MonoBehaviour
{
	public NPCSetVisible[]  order;
	
	public bool awaitingTagIn;
	public NPCMover mover;
	private bool _disappearing = false;
	public string disappearReason;
	private NPCManager _npcManager;
	public string defaultLayer = "MainPlayer";
	public string color = "white";
	public static string debugOnlyGameObject = "SolidBlockOff";
	public bool immediateDisappear = false;
	public bool moverHasBeenActivated = false;
	public AdvancedNPCDisappearer ()
	{
	}
	
	public void Start() {

		this.tag = "NPC";
		BoxCollider2D[] cs = this.GetComponents<BoxCollider2D>();
		BoxCollider2D largest = null;
		for(int i=0;i<cs.Length;i++) {
			if((largest==null)||(cs[i].bounds.size.magnitude>largest.bounds.size.magnitude)) {
				largest = cs[i];
			}
		}
		if(largest!=null)
			largest.isTrigger = true;
		SpriteRenderer[] sr = this.GetComponentsInChildren<SpriteRenderer>();
		for(int i = 0;i<sr.Length;i++) {
			if(sr[i].gameObject.name.ToLower().StartsWith("shadow")) {
				
				sr[i].sortingLayerName = "UnderneathBuildings";
			} else
			sr[i].sortingLayerName = defaultLayer;
		}

		if(GameObject.FindGameObjectWithTag("NPCManager")!=null) {
			_npcManager = GameObject.FindGameObjectWithTag("NPCManager").GetComponent<NPCManager>();
			_npcManager.onConversationEnded += onConversationEnded;
			onConversationEnded(true);
			if(mover!=null) {
				mover.firstUpdate = false;
			}
		}
	}
	public void getTaggedIn() {
		awaitingTagIn = false;
		this.gameObject.SetActive(true);
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log("<color="+color+">Tag, I'm IT: "+this.gameObject.name+"</color>");
		this.appearObject(1f);
		this.onConversationEnded();
		if(_disappearing) {
			this.gameObject.SetActive(false);
		}
	}
	public void OnDisable() {
		//	Debug.Log ("OnDisableNPC!");
		
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color="+color+">"+this.gameObject.name+" - OnDisable</color>");
	}
	public void OnDestroy() {
		if(_npcManager!=null) 
			_npcManager.onConversationEnded -= onConversationEnded;
		_npcManager = null;
	}
	private void activateBoxColliders() {
		BoxCollider2D[] colliders = this.GetComponents<BoxCollider2D>();
		for(int i = 0;i<colliders.Length;i++) {
			colliders[i].enabled = true;
		}
	}
	private void disableBoxColliders() {
		BoxCollider2D[] colliders = this.GetComponents<BoxCollider2D>();
		for(int i = 0;i<colliders.Length;i++) {
			colliders[i].enabled = false;
		}
		
	}
	public void OnEnable() {
		
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color="+color+">Enable Object in AdvancedNPC Disappearer</color>");
	}
	private void disappearObject(float aFadeTime,string aReason) {
		_disappearing = true;
		disappearReason = aReason;
		if(immediateDisappear) {
			aFadeTime = 0f;
		}
		if(this.GetComponents<BoxCollider2D>().Length>0) {
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color="+color+">disappearObject (I had box colliders) "+aFadeTime+"</color>");
				
			disableBoxColliders ();
			if(this.GetComponent<ParticleSystem>()!=null) {
				this.GetComponent<ParticleSystem>().enableEmission = false;
				
				if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
					Debug.Log ("<color="+color+">I had particle systems</color>");
					
			} else {
				
				if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
					Debug.Log ("<color="+color+">Fading to 0, fade time is: "+aFadeTime+"</color>");
				//iTween.FadeTo(this.gameObject,0f,aFadeTime);
				//if(aFadeTime==0f) {
					this.gameObject.SetActive(false);
				//}
			//	TweenAlpha.Begin(this.gameObject,aFadeTime,0f);
			}
			
		} else {
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color="+color+">disappearObject "+aFadeTime+"</color>");
			
			this.gameObject.SetActive(false);
		}
		GameObject avatar = GameObject.FindGameObjectWithTag("Player");
		ProximitySelector ps = avatar.GetComponent<ProximitySelector>();
		ps.CheckTriggerExit(this.gameObject);
	}
	private void appearObject(float aFadeTime) {
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color="+color+">appearObject "+aFadeTime+"</color>");
		if(!this.awaitingTagIn) {
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color="+color+">Box Collider Components: "+this.GetComponents<BoxCollider2D>().Length+"</color>");
			if(this.GetComponents<BoxCollider2D>().Length>0) {
				if(!moverHasBeenActivated) // If mover has been activated, let the mover decide whether colliders enable
					activateBoxColliders();
				this.gameObject.SetActive(true);
				//iTween.FadeTo(this.gameObject,1f,aFadeTime);
			} else {
				this.gameObject.SetActive(true);
			}
			GameObject avatar = GameObject.FindGameObjectWithTag("Player");
			if(avatar!=null) {
				//ProximitySelector ps = avatar.GetComponent<ProximitySelector>();
				//ps.Check(this.gameObject);
			}
		}
	}
	
	private void activateMover(bool aFirstTurn) {
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
		Debug.Log("<color="+color+">Trying to activate mover on: "+this.gameObject.name+"</color>");
		moverHasBeenActivated = true;
		if(mover==null) {
			mover = this.GetComponent<NPCMover>();
			if(mover==null) {
				// No mover available, must have been destroyed already.
				return;
			}
		}
		
		mover.enabled = true;
		if(!aFirstTurn) {
			mover.firstUpdate = false;
		}
		this.disableBoxColliders();
		if(aFirstTurn) {
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log("<color="+color+">Mover is on First Turn</color>");
			mover.firstUpdate = aFirstTurn;
			if(aFirstTurn)
				mover.FirstTurnWalkerHandler();
			mover.FixedUpdate();
		} else {
			appearObject(0.01f);
		}
		GameObject avatar = GameObject.FindGameObjectWithTag("Player");
		ProximitySelector ps = avatar.GetComponent<ProximitySelector>();
		ps.CheckTriggerExit(this.gameObject);
	}
	private IEnumerator delayToStartAnim(Animator aAnimator,int aAnimState) {
		yield return new WaitForSeconds(0.5f);
		
		aAnimator.gameObject.SetActive(true);
		aAnimator.SetInteger("AnimState",aAnimState);
	}
	private void onConversationEnded(bool aFirstTurn = false) {
		_disappearing = false;
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color="+color+">onConversationEnded: "+debugOnlyGameObject+" / "+this.gameObject.name+"</color>");
		float fadeTime = 1f;
		if(aFirstTurn) {
			fadeTime = 0f;
		}
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color="+color+">Advanced NPC Disappearer onConversationEnded - "+this.gameObject.name+"</color>");
		
		ENPCTriggerType endingTriggerType = ENPCTriggerType.DoNothing;
		BoxCollider2D behaviourToEnable = null;
		NPCSetVisible lastThingUsed = null;
		for(int i = 0;i<this.order.Length;i++) {
			ENPCTriggerType response = order[i].triggerResponse();
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color="+color+">Advanced NPC Disappearer response from trigger "+i+" is "+response.ToString()+"</color>");
			behaviourToEnable = order[i].colliderToEnable;
			lastThingUsed = order[i];
			if(response==order[i].triggerType) {
				endingTriggerType = response;
				if(endingTriggerType==ENPCTriggerType.EnableComponent) {
					if(behaviourToEnable!=null) {
						behaviourToEnable.enabled = true;
					}
				}
				if(endingTriggerType==ENPCTriggerType.Appear) {
					this.appearObject(fadeTime);
				}
				if(endingTriggerType==ENPCTriggerType.DisableBoxCollider2D) {
					this.disableBoxColliders();
				}
				// Always activate mover if it has been called for. Can disappear later if needed.
				if(response==ENPCTriggerType.ActivateMover) {
					activateMover(aFirstTurn);
				}
			} else {
				if(response!=ENPCTriggerType.DoNothing) {
					endingTriggerType = response;
					
				}
				break;
			}
		}
		string endingType = endingTriggerType.ToString();
		if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
			Debug.Log ("<color="+color+">Advanced NPC Disappearer - Ending is: "+endingType+"</color>");
		
		switch(endingTriggerType) {
			case(ENPCTriggerType.Appear):
			if(!this.awaitingTagIn) this.appearObject(fadeTime); else disappearObject(fadeTime,"Antagonistic of appearobject (because I'm still awaiting tagin)");break;
			case(ENPCTriggerType.Disappear):this.disappearObject(fadeTime,"result was disappear");break;
			case(ENPCTriggerType.ActivateMover):if(!this.awaitingTagIn) activateMover(aFirstTurn);break;
			case(ENPCTriggerType.SetAnimationValue):
			if(!this.awaitingTagIn) {
				Animator[] childrenAnimators = this.GetComponentsInChildren<Animator>();
				for(int i = 0;i<childrenAnimators.Length;i++) {
					childrenAnimators[i].gameObject.SetActive(false);
				}
				
				if(lastThingUsed!=null) {
					if(this.GetComponent<NPCMover>()!=null) {
						Destroy (this.GetComponent<NPCMover>());
						
					}
					StartCoroutine(delayToStartAnim(lastThingUsed.animationOnAnimationEnable,lastThingUsed.animationValueToSet));
				}
			}
			break;
			case(ENPCTriggerType.DoNothing):
			if(debugOnlyGameObject.Length==0||debugOnlyGameObject==this.gameObject.name)
				Debug.Log ("<color="+color+">Do nothing and awaitingTagIn is:"+awaitingTagIn+"</color>");
			
			if(awaitingTagIn) {
				disappearObject(fadeTime,"Do nothing and was awaiting tag in");
			} else {
				appearObject(fadeTime);
			}
			break;
			case(ENPCTriggerType.EnableComponent):
				if(behaviourToEnable!=null) {
					behaviourToEnable.enabled = true;
				}
				break; 
			case(ENPCTriggerType.DisableComponent):
				if(behaviourToEnable!=null) {
					behaviourToEnable.enabled = false;
				}
				break;
			case(ENPCTriggerType.EnableBoxCollider2D):
				if(this.GetComponent<Collider2D>()!=null) {
					activateBoxColliders();
				}
				
			break;
			case(ENPCTriggerType.DisableBoxCollider2D):
			if(awaitingTagIn) {
				disappearObject(fadeTime,"waitingTagIn");
			} else {
				appearObject(fadeTime);
			}
			if(this.GetComponent<Collider2D>()!=null) {
				disableBoxColliders();
			}
			break;
		}
	}
}


