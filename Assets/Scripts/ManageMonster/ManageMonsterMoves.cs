// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Battles;
using System.Collections;
using PixelCrushers.DialogueSystem;
using Utils;


namespace ManageMonster
{
	public class ManageMonsterMoves : MonoBehaviour
	{
	
		public UIButton[] buttons;
		public UILabel[] labels;
		private BattleMonster _battleMonster;
		public GameObject hasMovePointsAvailable;
		public ManageMonsterMoves ()
		{
		}
		
		public void changeMoves() {
			if(Application.loadedLevelName.ToLower().Contains("managemonster")) {
		
			} else {
			//	AlertGUI.REF.LaunchMonsterMoveTree(this.monster);
				Destroy (this.gameObject);
			}
		}
		public void initMonster(MonsterDataMain aMonster,BattleMonster aBattleMonster) {
			for(int i = 0;i<buttons.Length;i++) {
				if(aMonster.selectedMoves[i]!=null) {
					if(aMonster.selectedMoves[i].hasMoveData) {
						labels[i].text = aMonster.selectedMoves[i].moveData.Name;
						buttons[i].gameObject.SetActive(true); 
						ElementalType e = aMonster.selectedMoves[i].moveData.elementType;
						ElementalLibrary.REF.recolourButtonForElement(buttons[i].GetComponent<UIButton>(),e);
						} else {
							buttons[i].gameObject.SetActive(false);
						}
				}
			}
			_battleMonster = aBattleMonster;
			if(aMonster.movePointsAvailable>0) {
				if(hasMovePointsAvailable!=null) {
					hasMovePointsAvailable.gameObject.SetActive(true);
				}
			} else {
				if(hasMovePointsAvailable!=null) {
					hasMovePointsAvailable.gameObject.SetActive(false);
				}
			}
		}
		void Update() {
		}
		void Start() {
		}
		
		public void performMove1() {
			doMove(0);
		}
		
		
		private void doMove(int aIndex) {
			if(monster.moves.size>=aIndex) {
				monster.doAttackAnimation();
				SelectedMoveData m = monster.moves[aIndex];
				MoveLibItem i = m.moveData;
				//Vector2 targetMonsterPosition = BattleConstants.getFaceOffPosition(_currentItem.targetTeam,targetTeam.updatedTargetPosition(_currentItem.targetMonster));
				
				StartCoroutine(doAttackAnimation(i));

			}
		}
		protected IEnumerator doAttackAnimation(MoveLibItem aMoveItem) {
			
			BetterList<BattleMonster> allTargets = new BetterList<BattleMonster>();
			allTargets.Add(this.monster);
			yield return new WaitForSeconds(0.45f);
			for(int i = 0;i<allTargets.size;i++) {
				
				GameObject animPrefab = aMoveItem.attackAnimationPrefab;
				if(animPrefab!=null)
					animPrefab.tag = "ParticleSystems";
				MoveAnimationLibItem anim = aMoveItem.attackAnimation;
				if(anim.movementType=="Normal") {
					if(animPrefab!=null)
						animPrefab.transform.position = allTargets[i].SpawnPosition;
				} else {
					if(animPrefab!=null) {
						animPrefab.transform.position = monster.SpawnPosition;
						Hashtable h = new Hashtable();
						h.Add("position",new Vector3(10,0,0));
						h.Add ("time",aMoveItem.attackAnimation.seconds);
						h.Add ("oncompletetarget",this.gameObject);
						h.Add ("oncomplete","AttackAnimationFinish");
						h.Add ("oncompleteparams",animPrefab);
					//	h.Add("easetype",iTween.EaseType.easeInQuad);
					//	iTween.MoveTo(animPrefab,h);
					}
				}
			}
			putParticlesInfront();
			//		StartCoroutine(pauseForDefenseAnim(targetMonster,0.01f/*aMoveQueue.moveData.attackAnimation.seconds*0.5f*/));
			//StartCoroutine(pauseForAttack(aMoveQueue,aMoveQueue.moveData.attackAnimation.seconds));
		}
		
		protected void putParticlesInfront() {
			GameObject[] allParticles = GameObject.FindGameObjectsWithTag("ParticleSystems");
			for(int i = 0;i<allParticles.Length;i++) {
				
				allParticles[i].GetComponent<ParticleSystem>().GetComponent<Renderer>().sortingLayerName = "ParticleLayer";
				ParticleSystem[] children = allParticles[i].GetComponentsInChildren<ParticleSystem>();
				for(int j = 0;j<children.Length;j++) {
					children[j].GetComponent<Renderer>().sortingLayerName = "ParticleLayer";
				}
			}
		}
		public void performMove2() {
			
			doMove(1);
		}
		
		public void performMove3() {
			
			doMove(2);
		}
		
		public void performMove4() {
			
			doMove(3);
		}
		
		public BattleMonster monster {
			get {
				ManageMonsterLeftSide leftSide = this.GetComponent<ManageMonsterLeftSide>();
				if(leftSide!=null)
					return leftSide.previewMonster; else {
						return _battleMonster;
					}
			}
		}
	}
}

