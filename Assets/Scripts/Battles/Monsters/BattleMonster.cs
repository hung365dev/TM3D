// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Items;
using System.Collections;


namespace Battles
{
	public class BattleMonster : BattleMonsterWithMoves
	{
		public string ownersName;
		public float hp;
		private Vector3 _cachedFaceOffPosition;
		public BattleMonster()
		{
			
		}

		public Vector3 faceOffPosition {
			get {
				if(_cachedFaceOffPosition==null||_cachedFaceOffPosition.magnitude==0f) {
					if(this.transform.FindChild("FaceOffPosition")!=null) {
						_cachedFaceOffPosition = this.transform.FindChild("FaceOffPosition").position;
					}
				}
				return _cachedFaceOffPosition;
			}
		}
		
		public void applyHPBoostForMove(MoveLibItem aItem,float aSplashPercent,ETeamPosition aTeamPosition,EMonsterPos aPosition) {
			float boostHP = 0f;
			switch(aItem.powerApplicationType) {
				case(EPowerApplicationTypes.Normal):
					//TODO Do normal power formula for boosting this monsters health
				break;
				
				case(EPowerApplicationTypes.PowerIsPercentOfHP):
					boostHP = (aItem.power/100)*this.monster.MaxHP;
				break;
			}
			if(boostHP>0f) {
				this.addHP(boostHP,aTeamPosition,aPosition);
				doCommentaryMessage(this.name+" healed by "+aItem.Name,ECommentaryMessageType.HealMessage);
			}
		}
		public void initMonster(MonsterDataMain aMonsterRef,EMonsterPos aMyPosition) {
			base.initMonster(aMonsterRef,aMyPosition);
			this.ownersName = aMonsterRef.ownersName;
			moveDataRef = new SelectedMoveData[aMonsterRef.selectedMoves.size];
			for(int i = 0;i<aMonsterRef.selectedMoves.size;i++) {
				moveDataRef[i] = aMonsterRef.selectedMoves[i];

				for(int j = 0;j<3;j++) {
					if(moveDataRef[i].moveData!=null) {
						GameObject g = moveDataRef[i].moveData.attackAnimationPrefab;
						if(g!=null) {
							g.SetActive(false);
							MoveAnimationLibItem.putBackParticles(g);
						}
						g = moveDataRef[i].moveData.attackAnimationHitPrefab;
						if(g!=null) {
							g.SetActive(false); 
							MoveAnimationLibItem.putBackParticles(g);
						}
					}
				}
			}
		}

		public void Update() {
			if(this._monsterRef!=null)
				hp = this._monsterRef.hp;
			base.Update ();
		}
		
		public Quaternion rotation {
			set {
				this.gameObject.transform.rotation = value;
			}
			get {
				return gameObject.transform.rotation;
			}
		}
		
	}
}

