// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using PixelCrushers.DialogueSystem;

[System.Serializable]
public class NPCSetVisible
{
	public ENPCTriggerType triggerType;
	public string quest;
	public EQuestStatus whenQuest;
	public EOperandType questOperandStatus = EOperandType.EqualTo;
	public string battle;
	public EBattleStatus battleStatus; 
	public string whenVariableName;
	public int whenVariableValue;
	public EOperandType variableOperand;
	public bool followThrough;
	public BoxCollider2D colliderToEnable;
	public Animator animationOnAnimationEnable;
	public int animationValueToSet;
	public NPCSetVisible ()
	{
	
	}
	public ENPCTriggerType returnAntagonisticTriggerType() {
		if(triggerType==ENPCTriggerType.Disappear) {
			return ENPCTriggerType.Appear;
		} else if(triggerType==ENPCTriggerType.Appear) {
			return ENPCTriggerType.Disappear;
		} else if(triggerType==ENPCTriggerType.ActivateMover) {
			return ENPCTriggerType.DoNothing;
		} else if(triggerType==ENPCTriggerType.EnableComponent) {
			return ENPCTriggerType.DisableComponent;
		} else if(triggerType==ENPCTriggerType.DisableComponent) {
			return ENPCTriggerType.EnableComponent;
		} else if(triggerType==ENPCTriggerType.EnableBoxCollider2D) {
			return ENPCTriggerType.DisableBoxCollider2D;
		} else if(triggerType==ENPCTriggerType.DisableBoxCollider2D) {
			return ENPCTriggerType.EnableBoxCollider2D;
		}
		return ENPCTriggerType.DoNothing;
	}
	
	public ENPCTriggerType triggerResponse() {
		
		if(quest!=null&&quest.Length>0) {
			quest = quest.Replace(" ","_");
			Lua.Result state = DialogueLua.GetQuestField(quest,"State");
			string wantedState = whenQuest.ToString();
			if(questOperandStatus==EOperandType.EqualTo) {
				if(state.AsString==whenQuest.ToString()) {
					return triggerType;
				} else {
					return returnAntagonisticTriggerType();
				}
			} else if(questOperandStatus==EOperandType.Not) {
				if(state.AsString!=whenQuest.ToString()) {
					return triggerType;
				} else {
					return returnAntagonisticTriggerType();
				}
			}

		} else if(battle!=null&&battle.Length>0) {
			Lua.Result r = DialogueLua.GetVariable(battle);
			if(r.AsInt==(int) battleStatus) {
				return triggerType;
			} else {
				return returnAntagonisticTriggerType();
			}
		} else if(whenVariableName!=null&&whenVariableName.Length>0) {
			Lua.Result variable = DialogueLua.GetVariable(whenVariableName);
			
			switch(variableOperand) {
				case(EOperandType.EqualTo):if(variable.AsInt==whenVariableValue) {
					return triggerType;
				} else {
					return returnAntagonisticTriggerType();
				}
				break;
				case(EOperandType.LessThan):if(variable.AsInt<whenVariableValue) {
					return triggerType;
				} else {
					return returnAntagonisticTriggerType();
				}
				break;
				case(EOperandType.MoreThan):if(variable.AsInt>whenVariableValue) {
					return triggerType;
				} else {
					return returnAntagonisticTriggerType();
				}
				break;
				case(EOperandType.Not):if(variable.AsInt!=whenVariableValue) {
					return triggerType;
				} else {
					return returnAntagonisticTriggerType();
				}
				break;
			}

			return ENPCTriggerType.DoNothing;
		}
	//	Debug.LogError("NPCSetVisible Entry with no data");
		return ENPCTriggerType.DoNothing;
	}
}
