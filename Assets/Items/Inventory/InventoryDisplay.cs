// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace Items
{
	public class InventoryDisplay : MonoBehaviour
	{
		public bool isActive;
		public UILabel categoryDisplay;
		public InventoryItemDisplay[] items;
		public InventoryItemFullDisplay fullDisplay;
		public AssignItemToMonster assignItem;
		public static MonsterDataMain targetMonster;
		public static EInventoryType inventoryType;
		
		public UIButton exitBtn;
		public delegate void OnBaitSelected(ItemBait aItem);
		public event OnBaitSelected onBaitSelected;
		
		public delegate void OnItemSelected(ITMItem aItem);
		public event OnItemSelected onItemSelected;
		
		public delegate void OnInventoryHide();
		public event OnInventoryHide onHideInventory;
		private int _currentPage = 0;
		public const int MAX_ITEMS_PER_PAGE = 16;
		
		public bool listeningToFullItem = false;
		public InventoryDisplay ()
		{
		
		}
		
		
		public static void setInventoryTarget(EInventoryType aInventoryType) {
			inventoryType = aInventoryType;
		}
		
		public static void setInventoryTarget(MonsterDataMain aMonster) {
			targetMonster = aMonster;
			if(aMonster.ownershipStatus==EOwnershipStatus.Wild) {
				inventoryType = EInventoryType.BaitView;
			}
		}
		public void Awake() {
			fullDisplay.gameObject.SetActive(false);
			this.gameObject.SetActive(isActive);
			if(exitBtn!=null)
				UIEventListener.Get(exitBtn.gameObject).onClick += hideInventory2;
			for(int i =0;i<this.items.Length;i++) {
				items[i].onClicked += onItemHasBeenClicked;
			}
			
		}
		
		private void OnDestroy() {
			for(int i =0;i<this.items.Length;i++) {
				items[i].onClicked -= onItemHasBeenClicked;
			}
			if(this.fullDisplay!=null) {
				this.listeningToFullItem = false;
				this.fullDisplay.onItemUsed -= this.onItemUsed;
			}
			InventoryDisplay.targetMonster = null;
		}
		private void onInventoryChanged(InventoryItem aItem) {
			//TODO Convert from table to presets
		}
		public void hideInventory2(GameObject go) {
			isActive = false;
			assignItem.gameObject.SetActive(false);
			this.gameObject.SetActive(isActive);
			AvatarMover.setJoystickActive(true);
			if(onHideInventory!=null) {
				onHideInventory();
			}
			
			PlayerMain.REF.onInventoryChanged -= onInventoryChanged;
		}
		
		public void hideInventory() {
			isActive = false;
			assignItem.gameObject.SetActive(false);
			this.gameObject.SetActive(isActive);
			AvatarMover.setJoystickActive(true);
			if(onHideInventory!=null) {
				onHideInventory();
			}
			
			PlayerMain.REF.onInventoryChanged -= onInventoryChanged;
		
		}
		public void hideInventoryAndDestroy() {
			isActive = false;
			AvatarMover.setJoystickActive(true);
			if(onHideInventory!=null) {
				onHideInventory();
			}
			
			PlayerMain.REF.onInventoryChanged -= onInventoryChanged;
			Destroy (this.gameObject);
		}
		public void Toggle() {
			isActive = !isActive;
			assignItem.gameObject.SetActive(false);
			this.gameObject.SetActive(isActive);
			if(isActive) {
				PlayerMain.REF.onInventoryChanged += onInventoryChanged;
				createTableItems();
				
				AvatarMover.setJoystickActive(false);
			} else {
				
				PlayerMain.REF.onInventoryChanged -= onInventoryChanged;
				AvatarMover.setJoystickActive(true);
			}
		}
		public void Toggle(bool aShowAll) {
			isActive = aShowAll;
			assignItem.gameObject.SetActive(false);
			this.gameObject.SetActive(aShowAll);
			if(isActive) {
				PlayerMain.REF.onInventoryChanged += onInventoryChanged;
				if(aShowAll)
					createTableItems();
				
				AvatarMover.setJoystickActive(false);
			} else {
				AvatarMover.setJoystickActive(true);
				
				PlayerMain.REF.onInventoryChanged -= onInventoryChanged;
			}
		}
		private void hideAllItems() {
			for(int i = 0;i<this.items.Length;i++) {
				this.items[i].gameObject.SetActive(false);
			}
		}
		
		public void onItemHasBeenClicked(InventoryItem aItem) {
			Debug.Log ("Item has been clicked: "+aItem.item.Name());
			fullDisplay.gameObject.SetActive(true);
			fullDisplay.initItem(aItem,assignItem);
			if(!listeningToFullItem) {
				fullDisplay.onItemUsed += onItemUsed;
				listeningToFullItem = true;
			}
		}
		private void onItemUsed(ITMItem aItem) {

			PlayerMain.REF.removeFromInventory(aItem);
			if(onItemSelected!=null) {
				onItemSelected(aItem);
			}
			if(InventoryDisplay.inventoryType==EInventoryType.BaitView||InventoryDisplay.inventoryType==EInventoryType.Battleview) {
				this.Toggle(false);
			}
		}
		
		public void createBattleItemsTable() {
			
			BetterList<InventoryItem> allItems = PlayerMain.REF.itemsOfType(EItemType.BattleBoost|EItemType.Recovery|EItemType.Vitamin);
			displayItems(allItems);
			categoryDisplay.text = "Battle Items";
		}
		
		private void displayItems(BetterList<InventoryItem> aItems) {
			int c = 0;
			for(int i = _currentPage*MAX_ITEMS_PER_PAGE;i<_currentPage*MAX_ITEMS_PER_PAGE+MAX_ITEMS_PER_PAGE;i++) {
				if(i>=aItems.size) {
					items[i].gameObject.SetActive(false);
				} else {
					InventoryItemDisplay display = items[c];
					c++;
					display.initItem(aItems[i]);
					items[i].gameObject.SetActive(true);
				}
			}
		}
		public void createBaitsTable() {
			BetterList<InventoryItem> allBaits = PlayerMain.REF.itemsOfType(EItemType.Bait);
			displayItems(allBaits);
			
			categoryDisplay.text = "All Baits";
		}
		
		private void createTableItems() {
			BetterList<InventoryItem> all = PlayerMain.REF.allItems;
			
			displayItems(all);
			categoryDisplay.text = "Whole Inventory";
			
		}
	}
}

