// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Battles;
using System.Collections;
using utils;
using Items;
using Utils;

public class BattleOverScreen : MonoBehaviour
{

	public UILabel cashWon;
	public UIButton exitBattle;
	public GameObject victoryAnim;
	public GameObject lossAnim;
	public UIGrid itemsWon;
	public UISprite cashPotSprite;
	private BetterList<BattleCompleteMonster> _completeMonsters = new BetterList<BattleCompleteMonster>();
	private BetterList<BattleMonster> _monstersToEvolve = new BetterList<BattleMonster>();
	private BattleTeam _team;
	public UILabel itemsReceivedLabel;
	private BattleMonster _evolvingMonster;
	private BattleMonster _caughtMonster;
	public GameObject rewardItemPrefab;
	public bool debugEvolve = false;
	public delegate void OnExitBattle();
	public event OnExitBattle onExitBattle;
	
	public BattleOverScreen ()
	{
	}


	public bool evolutionsToConsume {
		get {
			if((this._monstersToEvolve!=null&&this._monstersToEvolve.size>0)||(_evolvingMonster!=null)) {

				return true;

			}
			return false;
		}
	}

	public BattleMonster monsterEvolving {
		get {
			if(_evolvingMonster!=null) {
				return _evolvingMonster;
			}
			return null;
		}
	}
	public void init(BattleTeam aTeam,BattleTeam aOpponentTeam,bool aHasWon) {
		gameObject.SetActive(true);
		_team = aTeam;
		double xpToAdd = 0;
		if(aHasWon) {
		//	audio.audioFilename = "Music/POL-dawn-of-time-short";
		//	audio.Play();
			this.lossAnim.gameObject.SetActive(false);
			BetterList<BattleMonster> monsters = aTeam.monstersAsBattleMonster;
			for(int i = 0 ;i<monsters.size;i++) {
				GameObject go = UnityEngine.Object.Instantiate(Resources.Load("Battles/Interface/BattleCompleteMonster1") as GameObject) as GameObject;
				GameObject uiRoot = GameObject.FindGameObjectWithTag("UIRoot");
				SetNullAnchorsToGameObject anchors = go.GetComponent<SetNullAnchorsToGameObject>();
				go.transform.parent = uiRoot.transform;
				anchors.relativeLeft = 0.33f*i;
				anchors.relativeRight = 0.33f+(0.33f*i);
				anchors.OnEnableOverride();
				BattleCompleteMonster cm = go.GetComponent<BattleCompleteMonster>();
				xpToAdd = 0;
				if(monsters[i].monster.restingStatus==ERestingStatus.Awake) {
					xpToAdd += aOpponentTeam.monstersXPForDefeatingTeam(monsters[i].monster);
				}
				_completeMonsters.Add(cm);
				cm.init(monsters[i],(int) xpToAdd,i*0.5,aOpponentTeam.bestMeleeAtck,aOpponentTeam.bestMeleeDef,aOpponentTeam.bestRangeAtck,aOpponentTeam.bestRangeDef,aOpponentTeam.bestSpeed,aOpponentTeam.bestAccuracy,aOpponentTeam.bestAgility);
		/*		go.transform.position = new Vector3(-2.25f+(i*2.25f),0.0f);
				go.transform.localPosition = new Vector3(-2.25f+(i*2.25f),0.0f);*/
				go.transform.localScale = new Vector3(1.0f,1.0f,1.0f);
				 
				monsters[i].transform.localScale = new Vector3(0.5f,0.5f,0.5f);
				monsters[i].ChangeLayerTo("UI");
				monsters[i].transform.parent = GameObject.FindGameObjectWithTag("NGUICamera").transform;	
				Vector3 localPos = go.transform.localPosition;
				monsters[i].gameObject.transform.localPosition = new Vector3(localPos.x,-160f,0f);
			}
			if(BattleInit.REF!=null) {
				if(BattleInit.REF.itemsToAward!="") {
					string[] items = BattleInit.REF.itemsToAward.Split(new char[] {','});
					for(int i = 0 ;i<items.Length;i++) {
						ITMItem item = ItemLibrary.REF.getItemFromName(items[i]);
						if(item!=null) {
							PlayerMain.REF.addToInventory(item);
							
							GameObject obj = NGUITools.AddChild(this.itemsWon.gameObject,rewardItemPrefab);
							UITexture t = obj.GetComponent<UITexture>();
							t.gameObject.name = item.Name();
							t.mainTexture = item.texture();
						}
						
					}
				} else {
					itemsWon.gameObject.SetActive(false);
				}
				if(BattleInit.REF.money>0) {
					this.cashWon.text = string.Format("{0:n0}", BattleInit.REF.money);
					PlayerMain.REF.changeSoftCurrency(BattleInit.REF.money);
				} else {
					this.cashWon.text = string.Format("{0:n0}", "");
					this.cashPotSprite.gameObject.SetActive(false);
				}
			}
			StartCoroutine(findMonstersForEvolve(monsters.size*0.5f+0.5f));
		} else {
			
		//	GetComponent<AudioSource>(). = "Music/POL-war-victims-short";
		//	GetComponent<AudioSource>().Play();
			PlayerMain.REF.futureDoorway.targetXY = PlayerMain.REF.futureDoorway.targetMap.defaultStart;
			PlayerMain.REF.futureDoorway.futureNPCChat = "";
			victoryAnim.gameObject.SetActive(false);
			hidePrizes();
		}
		PlayerMain.REF.saveMonsters();
		GameObject mLobby = GameObject.FindGameObjectWithTag("MultiplayerPreGame");
	/*	if(mLobby!=null) {
			MultiplayerPregame l = mLobby.GetComponentInChildren<MultiplayerPregame>();
			l.active = true;
			l.isPostGame = true; 
			Debug.Log("Battle room is: "+SmartfoxHandler.REF.battleRoom);
			if(SmartfoxHandler.REF.battleRoom!=null) {
				RoomVariable r = SmartfoxHandler.REF.battleRoom.GetVariable("rank");
				Debug.Log ("Rank is: "+r.GetIntValue());
				if(r.GetIntValue()>0) {
					Debug.Log ("Has won is: "+aHasWon);
					if(aHasWon) {
						SaveGameUtils.REF.AddToScore(xpToAdd);
					}
				}
			}
		}*/
	
	}
	private void hidePrizes() {
		
		this.cashWon.gameObject.SetActive(false);
		this.itemsWon.gameObject.SetActive(false);
		this.cashPotSprite.gameObject.SetActive(false);
		this.itemsReceivedLabel.gameObject.SetActive(false);
	}
	public void init(BattleMonster aCaughtMonster) {
		gameObject.SetActive(true);
		this.lossAnim.gameObject.SetActive(false);
		this.victoryAnim.gameObject.GetComponentInChildren<UILabel>().text = aCaughtMonster.name+" has been Caught!";
		_caughtMonster = aCaughtMonster;
		StartCoroutine(monsterCaughtRoutine());
		this.cashWon.gameObject.SetActive(false);
		this.itemsWon.gameObject.SetActive(false);
		this.cashPotSprite.gameObject.SetActive(false);
		this.itemsReceivedLabel.gameObject.SetActive(false);
		if(BattleInit.REF!=null)
			BattleInit.REF.setNPCBattleStatus(1);
			
	
	}
	
	private IEnumerator monsterCaughtRoutine() {
		yield return new WaitForSeconds(0.5f);
		_caughtMonster.doAttackAnimation();
		yield return new WaitForSeconds(2.0f);
		
		yield return new WaitForSeconds(0.1f);
	/*	_monsterStats = AlertGUI.REF.ShowManageMonsterScreen(_caughtMonster);
		TweenAlpha.Begin(this._monsterStats.gameObject,0.01f,0.0f);
		TweenAlpha.Begin(this._monsterStats.gameObject,2.0f,1.0f);*/
		
	}
	private IEnumerator findMonstersForEvolve(float aDelay) {
		yield return new WaitForSeconds(aDelay);
		
		BetterList<BattleMonster> monsters = _team.monstersAsBattleMonster;
		for(int i = 0;i<_completeMonsters.size;i++) {
			if(_completeMonsters[i].needsEvolve) {
				_monstersToEvolve.Add(monsters[i]);
			} 
		}
		consumeEvolves();
	}
	private void fadeCompleteMonsters(float aAlpha) {
		for(int i = 0;i<this._completeMonsters.size;i++) {
			if(_completeMonsters[i]!=null&&_completeMonsters[i].gameObject!=null)
			TweenAlpha.Begin(_completeMonsters[i].gameObject,0.25f,aAlpha);
		}
	}
	
	private void fadeMonstersApartFrom(BattleMonster aMonsterToIgnore,float aAlpha) {
		
		BetterList<BattleMonster> monsters = _team.monstersAsBattleMonster;
		for(int i = 0;i<monsters.size;i++) {
			if(monsters[i]==aMonsterToIgnore) {
			} else {
		//		iTween.FadeTo(monsters[i].gameObject,aAlpha,0.25f);
			}
		}
	}
	private void prepareAllForEvolves() {
		for(int i = 0;i<_completeMonsters.size;i++) {
			_completeMonsters[i].prepareForEvolve();
		}
	}
	public void pauseCurrentEvolution() {
		fadeCompleteMonsters(1f);
		_evolvingMonster.pauseEvolution ();
		_monstersToEvolve.Insert (0, _evolvingMonster);
		//	fadeCompleteMonsters(0f);
		BattleControllerWithParticleEngines.putParticlesInfront();
		StopAllCoroutines ();
	}
	public void cancelCurrentEvolve() {
		StopAllCoroutines ();
		_monstersToEvolve.RemoveAt (0);
		_evolvingMonster = null;
		if (_monstersToEvolve != null && _monstersToEvolve.size > 0) {
			StartCoroutine(continueToNextEvo());
		} else {
			if(onExitBattle!=null)
				onExitBattle();
		}
	}
	public void consumeEvolves() {
		if(_monstersToEvolve.size>0) {
			BattleMonster bm = _monstersToEvolve[0];
			fadeMonstersApartFrom(bm,0f);
			prepareAllForEvolves();
			bm.showEvolveAnim();
			_evolvingMonster = bm;
			_monstersToEvolve.RemoveAt(0);
		//	fadeCompleteMonsters(0f);
			BattleControllerWithParticleEngines.putParticlesInfront();
			StartCoroutine(WaitForEvolutionToComplete());
		}
	}
	private IEnumerator WaitForEvolutionToComplete() {
		yield return new WaitForSeconds(4.0f);
	/*	_monsterStats = AlertGUI.REF.ShowManageMonsterScreen(this._evolvingMonster);
		_monsterStats.onClose += onContinueEvolutions;
		TweenAlpha.Begin(this._monsterStats.gameObject,0.01f,0.0f);
		TweenAlpha.Begin(this._monsterStats.gameObject,2.0f,1.0f);*/
		PlayerMain.REF.saveMonsters();
		_evolvingMonster = null;
		
	}
	public void onContinueEvolutions() {
		if(this._team!=null) {
			StartCoroutine(continueToNextEvo());
		} else {
			if(onExitBattle!=null) {
				onExitBattle();
			}
		}

	}
	
	public IEnumerator continueToNextEvo() {
		
//		if(_monsterStats!=null)
		//	Destroy (this._monsterStats.gameObject);
	//	this._monsterStats = null;
		fadeCompleteMonsters(1f);
		fadeMonstersApartFrom(null,1.0f);
		yield return new WaitForSeconds(0.25f);
		this.consumeEvolves();
	}
	public void Update() {
		for(int i = 0;i<_completeMonsters.size;i++) {
			const float seperator = 300f;
			if(_completeMonsters[i]!=null&&_completeMonsters[i].gameObject!=null) {
				_completeMonsters[i].gameObject.transform.position = new Vector3(-seperator+(i*seperator),50.0f);
				_completeMonsters[i].gameObject.transform.localPosition = new Vector3(-seperator+(i*seperator),50.0f);
			}
		}
	}
	
	
}

