// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Items;
using utils;
using PixelCrushers.DialogueSystem;
using UnityEngine;


namespace Player
{
	public class PlayerWithInventory : PlayerWithMonsters
	{
		private BetterList<InventoryItem> _myItems = new BetterList<InventoryItem>();
		
		public delegate void OnInventoryChanged(InventoryItem aItem);
		public event OnInventoryChanged onInventoryChanged; 
		private bool _allowSave = true;
		public PlayerWithInventory ()
		{
			
		}
		public virtual void initForDebug() {
			base.initForDebug();
			BetterList<ITMItem> item = ItemLibrary.REF.getRandomItems(500);
			_allowSave = false;
			for(int i = 0;i < item.size;i++) {
				addToInventory(item[i]);
			}
			_allowSave = true;
			saveInventory();
		}
		public override bool consumeItem(ITMItem aItem) {
		
			if(base.consumeItem(aItem)) {
				this.removeFromInventory(aItem);
				return true;
			}
			return false;
		}
		
		public void saveInventory() {
		//	if(_allowSave)
//				SaveGameUtils.REF.saveItems(itemsToString());
		}
		public bool canBuyItem(ITMItem aItem) {
			return this.softCurrency>=aItem.SoftCost()&&this.hardCurrency>=aItem.HardCost();
		}
		public int amountOwned(ITMItem aItem) {
			for(int i = 0;i<_myItems.size;i++) {
				if(_myItems[i].item==aItem) {
					return _myItems[i].count;
				}
			}
			return 0;
		}
		public string itemsToString() {
			string r = "";
			for(int i = 0;i<_myItems.size;i++) {
				string thisItem = _myItems[i].ItemAsString;
				r+=thisItem;
				
				if(i<_myItems.size-1) {
					r+=",";	
				}
			}
			return Base64Compressor.Base64Encode(r);
		}
		public void itemsFromString(string aString) {
			string decomp = Base64Compressor.Base64Decode(aString);
			string[] split = decomp.Split(new char[] {','});
			for(int i = 0;i<split.Length;i++) {
				InventoryItem item = new InventoryItem();
				item.ItemAsString = split[i];
				if((item.item!=null)&&(item.count>0)) {
					_myItems.Add(item);
				}
			}
		}
		public void removeFromInventory(ITMItem aItem) {
			for(int i = 0;i<_myItems.size;i++) {
				if(_myItems[i].item==aItem) {
					_myItems[i].count--;
					InventoryItem item = _myItems[i];
					if(_myItems[i].count<=0) {
						_myItems.RemoveAt(i);
					}
					if(onInventoryChanged!=null) {
						onInventoryChanged(item);
					}
					saveInventory();
					return;
				}
			}
		}
		public bool hasItems() {
			return this._myItems.size>0;
		}
		public void addToInventory(string aNames) {
			string[] s = aNames.Split(new char[] {'|'});
			for(int i = 0;i<s.Length;i++) {
				if(s[i]!="nil") {
				ITMItem thisItem = ItemLibrary.REF.getItemFromName(s[i]);
				if(thisItem==null) {
					Debug.LogError("Item "+s[i]+" Could not be found!");
					return;
				}
				addToInventory(thisItem);
				}
			}
			
			aNames = aNames.Replace("|",", ");
			//DialogueManager.ShowAlert(aNames+" Added to Inventory");
			
		}
		public void addToInventory(ITMItem aItem) {
			if(aItem!=null) {
			for(int i = 0;i<_myItems.size;i++) {
				if(_myItems[i].item.Name()==aItem.Name()) {
					_myItems[i].count++;
					
					saveInventory();
					return;
				}
			}
				InventoryItem item = new InventoryItem();
				item.count = 1;
				item.item = aItem;
				_myItems.Add(item);
				
				saveInventory();
			}
			
		}
		public BetterList<InventoryItem> allItems {
			get {
				return _myItems;
			}
		}
		
		public BetterList<InventoryItem> itemsOfType(EItemType aType) {
			BetterList<InventoryItem> ret = new BetterList<InventoryItem>();
			for(int i = 0;i<_myItems.size;i++) {
				EItemType combined = _myItems[i].item.Type()&aType;
				if((int) combined>0) {
					ret.Add(_myItems[i]);
				}
			}
			return ret;
		}
	}
}

