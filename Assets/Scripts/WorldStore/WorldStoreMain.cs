// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Items;


namespace worldstore
{
	public class WorldStoreMain : MonoBehaviour
	{
		public GameObject tableItem;
		public GameObject buttonsHolder;
		public GameObject titleHolder;
		public WorldStoreItemFull storeItemFull;
		public StoreSingleItem[] items;
		public const int WORLD_STORE_PAGE_MAX = 12;
		private int _currentPage = 0;
		
		private BetterList<ITMItem> _currentItems;
		public UILabel headerLabel;
		public delegate void OnCloseStore(WorldStoreMain aWorldStore);
		public event OnCloseStore onCloseWorldStore;
		
		public WorldStoreMain ()
		{
		}
		
		public void onLeftPage() {
			this._currentPage--;
			if(_currentPage<0) {
				_currentPage = (int) Convert.ToInt32(this._currentItems.size/WORLD_STORE_PAGE_MAX);
			}
			this.showItems(this._currentItems);
		}
		public void onRightPage() {
			this._currentPage++;
			if(_currentPage>(int) Convert.ToInt32(this._currentItems.size/WORLD_STORE_PAGE_MAX)) {
				_currentPage = 0;
			}
			this.showItems(this._currentItems);
		}
		private void disableButton(string aName) {
			GameObject db = GameObject.Find(aName);
	
			if(db!=null) {
				UIButton b = db.GetComponent<UIButton>();
				if(b!=null) {
					b.isEnabled = false;
				}
			}
			
		}
		public void initForBattle() {
			disableButton("AllButton");
			disableButton("EvoStonesButton");
			disableButton("MonstersButton");
		}
		public void Awake() {
			for(int i= 0;i<items.Length;i++) {
				items[i].active = false;
			}
			showAll();
		}
		public void onShowAllClick() {
			_currentPage = 0;
			showAll();
		}
		
		public void onBaitFoodClick() {
			_currentPage = 0;
			showItems (ItemLibrary.REF.baitsLibrary.allItems());
		}
		
		public void onHerbsHeals() {
			_currentPage = 0;
			showItems (ItemLibrary.REF.recoveryLibrary.allItems());
		}
		
		public void onBoostsClick() {
			_currentPage = 0;
			BetterList<ITMItem> combined = new BetterList<ITMItem>();
			
			BetterList<ITMItem> items = ItemLibrary.REF.boostLibrary.allItems();
			BetterList<ITMItem> items2 = ItemLibrary.REF.vitLibrary.allItems();
			BetterList<ITMItem> items3 = ItemLibrary.REF.playerBoostsLibrary.allItems();
			for(int i = 0;i<items.size;i++) {
				combined.Add(items[i]);
			}
			
			for(int i = 0;i<items2.size;i++) {
				combined.Add(items2[i]);
			}
			for(int i = 0;i<items3.size;i++) {
				combined.Add(items3[i]);
			}
			showItems (combined);
		}
		
		public void onTerraCollarsClicked() {
			_currentPage = 0;
			showItems (ItemLibrary.REF.baitsLibrary.allItems());
		}
		
		public void onClose() {
			if(onCloseWorldStore!=null) {
				onCloseWorldStore(this);
			}
			Destroy(this.gameObject);
		}
		public void onEvoStonesClicked() {
			showItems (ItemLibrary.REF.baitsLibrary.allItems());
		}
		
		
		
		public void onMonstersClicked() {
			showItems (ItemLibrary.REF.baitsLibrary.allItems());
		}
		
		
		public void showItems(BetterList<ITMItem> aItems) {
			int i = 0;
			int c = 0;
			int totalPages = (int) Math.Ceiling((double) aItems.size/items.Length);
			int cp = this._currentPage+1;
			string pageName = (string) cp.ToString();
			this.headerLabel.text = "Page: "+pageName+"/"+totalPages.ToString();
			_currentItems = aItems;
			for(i =_currentPage*WORLD_STORE_PAGE_MAX;i<_currentPage*WORLD_STORE_PAGE_MAX+WORLD_STORE_PAGE_MAX;i++) {
				if(i>=aItems.size) {
					items[c].active = false;
				}
				else
					createStoreItem(aItems[i],c);
				c++;
			}
			
		}
		public void showWholeStore() {
			
			storeItemFull.gameObject.SetActive(false);
			buttonsHolder.gameObject.SetActive(true);
			showAllItems();
			titleHolder.gameObject.SetActive(true);
		}
		private void hideAllItems() {
			for(int  i= 0;i<this.items.Length;i++) {
				items[i].gameObject.SetActive(false);
			}
		}
		
		private void showAllItems() {
			for(int  i= 0;i<this.items.Length;i++) {
				if(items[i].active) {
					items[i].gameObject.SetActive(true);
				} else {
					items[i].gameObject.SetActive(false);
				}
			}
		}
		public void showSingleItem() {
			
			storeItemFull.gameObject.SetActive(true);
			buttonsHolder.gameObject.SetActive(false);
			hideAllItems();
			titleHolder.gameObject.SetActive(false);
		}
		public void showAll() {
			
			BetterList<ITMItem> all = ItemLibrary.REF.allItems;
			int i = 0;
			int c = 0;
			this.showItems(all);
		}
		public void createStoreItem(ITMItem aItem,int aIndex) {
			StoreSingleItem b = this.items[aIndex];
			b.initButton(aItem);
			b.itemSelected += onItemClicked;
			
		}
		
		public void onItemClicked(ITMItem aItem) {
			showSingleItem();
			this.storeItemFull.init(aItem);
			Debug.Log ("Store Item Clicked!"+aItem);
		}
		
		public void hideSingleItem() {
		
		}
		
	}
}

