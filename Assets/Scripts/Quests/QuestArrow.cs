// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using PixelCrushers.DialogueSystem;
using System.Collections;


namespace Quests
{
	public class QuestArrow : MonoBehaviour
	{
	
		private bool _inited = false;
		private bool _isVisible = true;
		public string quest;
		public EArrowBehaviour behaviour = EArrowBehaviour.Default;
		public int entry;
		public string alertWhenOnScreen;
		public GameObject userAvatar;
		public GameObject camera;
		public GameObject targetObj;
		public string mapName;
		public Vector3 targetPosition;
		public string targetNPC;
		public Transform uIRootTarget;
		public Transform targetObject;
		private bool _overrideArrowPos = false;
		public float targetAngle;
		public string alternativeTarget;
		public float startTime;
		public const float defaultYOffset = -1.5f;
		private bool _fullyInited = false;

		private static Camera _gameCamera;
		private static Camera _uiCamera;

		public QuestArrow ()
		{
		}
		public void OnDestroy() {
			this.StopAllCoroutines();
		}

		public Camera uiCamera {
			get {
				if(_uiCamera==null) {
					_uiCamera = GameObject.FindGameObjectWithTag("NGUICamera").GetComponent<Camera>();
				}
				return _uiCamera;
			}
		}
		public Camera gameCamera {
			get {
				if(_gameCamera==null) {
					_gameCamera = GameObject.FindGameObjectWithTag("MainCamera").GetComponent<Camera>();
				}
				return _gameCamera;
			}
		}
	/*	private IEnumerator pauseToFullyInit() {
			
		}*/
		public bool initFromQuest(string aQuest,int aEntry,string aMap,string aMapFilename,WorldExplorer aExplorerRef) {
			startTime = Time.time;
			quest = aQuest;
			TweenAlpha.Begin(this.gameObject,0f,0f);
		//	StartCoroutine(pauseToFullyInit());
			this._isVisible = false;
			Lua.Result varName = DialogueLua.GetQuestField(aQuest,"Entry1Variable");
			Lua.Result targetMap = DialogueLua.GetQuestField(aQuest,"Entry1Map");
			Lua.Result targetLocation = DialogueLua.GetQuestField(aQuest,"Entry1Position");
			Lua.Result targetVarValue = DialogueLua.GetQuestField(aQuest,"Entry1VariableTarget");
			QuestState entryState = QuestLog.GetQuestEntryState(aQuest,aEntry+1);
			if(entryState==QuestState.Success) {
				return false;
			}
			switch(aEntry) {
				case(1):
				varName = DialogueLua.GetQuestField(aQuest,"Entry2Variable");
				targetMap = DialogueLua.GetQuestField(aQuest,"Entry2Map");
				targetLocation = DialogueLua.GetQuestField(aQuest,"Entry2Position");
				targetVarValue = DialogueLua.GetQuestField(aQuest,"Entry2VariableTarget");
				break;
			case(2):
				varName = DialogueLua.GetQuestField(aQuest,"Entry3Variable");
				targetMap = DialogueLua.GetQuestField(aQuest,"Entry3Map");
				targetLocation = DialogueLua.GetQuestField(aQuest,"Entry3Position");
				targetVarValue = DialogueLua.GetQuestField(aQuest,"Entry3VariableTarget");
				break;
			case(3):
				varName = DialogueLua.GetQuestField(aQuest,"Entry4Variable");
				targetMap = DialogueLua.GetQuestField(aQuest,"Entry4Map");
				targetLocation = DialogueLua.GetQuestField(aQuest,"Entry4Position");
				targetVarValue = DialogueLua.GetQuestField(aQuest,"Entry4VariableTarget");
				break;
			case(4):
				varName = DialogueLua.GetQuestField(aQuest,"Entry5Variable");
				targetMap = DialogueLua.GetQuestField(aQuest,"Entry5Map");
				targetLocation = DialogueLua.GetQuestField(aQuest,"Entry5Position");
				targetVarValue = DialogueLua.GetQuestField(aQuest,"Entry5VariableTarget");
				break;
			}
			
			bool isJustFindTheNPCQuest = false;
			if(varName.AsString.Length==0) {
				isJustFindTheNPCQuest = true;
			}
			bool isBattle = false;
			string varNameAsString = varName.AsString;
			string[] split = varName.AsString.Split(new char[] {','});
			if(split.Length==2) {
				if(split[1]=="Battle") {
					isBattle = true;
				}
				varNameAsString = split[0];
			}
			 
			if(this.behaviour!=EArrowBehaviour.DisappearWhenOnScreen) {
				_isVisible = true;
				TweenAlpha.Begin(this.gameObject,0.25f,1f);
			}
			Debug.Log (aMap+" - "+targetMap.AsString);
			if(aMap==targetMap.AsString||aMapFilename==targetMap.AsString) {
				Debug.Log ("Correct Map! ");
				bool isOwnMonsterQuest = false;
				if(varName.AsString=="OwnedSpecific") {
					if(PlayerMain.REF.OwnsMonster(MonsterLibrary.REF.getMonster(targetVarValue.AsInt)).size>0) {
						setQuestEntryComplete(aQuest,aEntry);
						return false;
					} else {
						isOwnMonsterQuest = true;
						setQuestEntryActive(aQuest,aEntry);
					}
				}
				Lua.Result currentVal = DialogueLua.GetVariable(varNameAsString);
				
				int varValue = currentVal.AsInt;
				if(targetLocation.AsString=="Hide") {
					// We wanted to do this quest entry just to put them on to this map, we now hide away because we're on the map.
					Destroy (this.gameObject);
					return true;
				}
				if(varValue<targetVarValue.AsInt||(isBattle&&varValue!=targetVarValue.AsInt)||(isOwnMonsterQuest)||(isJustFindTheNPCQuest)) {
					_inited = false;
					Debug.Log ("Variable: "+varNameAsString+" should be: "+varValue+" got var value: "+targetVarValue.AsInt);
					split = targetLocation.AsString.Split(new char[] { ',' });
					if(split.Length>=2) {					
						targetPosition = new Vector3((float) Convert.ToDouble(split[0]),(float) Convert.ToDouble(split[1]));
						this.transform.tag = "QuestArrow";
						this.tag = "QuestArrow";
						if(split.Length>=3) {
							if(Convert.ToInt32(split[2])==1)
								this.behaviour = EArrowBehaviour.DisappearWhenOnScreen;
						}
						if(split.Length>=4) {
							alertWhenOnScreen = split[3];
						}
						return true;
					} else {
						Debug.Log ("Split Length was 1: "+split[0]);
						if(split.Length==1) {
							if(split[0]=="Binary") {
								// Find the nearest NPC we can with a Conversation Switcher
								GameObject[] allNPCs = GameObject.FindGameObjectsWithTag("NPC");;
								int targetValue = 1;
								for(int i = 0;i<allNPCs.Length;i++) {
									ConversationSwitcher switcher = allNPCs[i].GetComponent<ConversationSwitcher>();
									// If this battle has not been won, lets just point at this one.
									if(switcher!=null&&switcher.justCheckThisBattle!=null&&switcher.justCheckThisBattle.Length>0) {
										if(DialogueLua.GetVariable(switcher.justCheckThisBattle).AsInt!=1) {
											targetPosition = switcher.gameObject.transform.position;
											targetObject = switcher.gameObject.transform;
											this.transform.tag = "QuestArrow";
											return true;
										}
										
									} else
									if(switcher!=null&&switcher.variableName==varName.AsString) {
										if(switcher.newConversation!=switcher.GetComponent<ConversationTrigger>().conversation) {
											targetPosition = switcher.gameObject.transform.position;
											targetObject = switcher.gameObject.transform;
											this.transform.tag = "QuestArrow";
											return true;
										}
									}
								}
								
								setQuestEntryComplete(aQuest,aEntry);
								return false;
							} else {
								GameObject o = GameObject.Find(split[0]);
								if(o!=null) {
									targetPosition = o.gameObject.transform.position;
									targetObject = o.gameObject.transform;
									this.transform.tag = "QuestArrow";
								}
							}

							return true;
						}
					}
				} else {
					setQuestEntryComplete(aQuest,aEntry);
					return false;
				}
			} else {
			
				// Find the door where this entry exists
				GameObject[] objects = GameObject.FindGameObjectsWithTag("Doorway");
				Lua.Result overrideArrow = DialogueLua.GetQuestField(aQuest,"OverrideMapDoorwayArrow");
				if(overrideArrow.AsString.Length>4) {
					GameObject overrideLocation = GameObject.Find(overrideArrow.AsString);
					targetPosition = overrideLocation.transform.localPosition;
					targetObject = overrideLocation.transform;
					return true;
				}
				
				Lua.Result showMultipleDoorways = DialogueLua.GetQuestField(aQuest,"ShowMultipleDoorways");
				if(showMultipleDoorways.AsBool) {
					for(int i = 0;i<objects.Length;i++) {
						MapDoorway m = objects[i].GetComponent<MapDoorway>();
						if(m.targetDoorway==targetMap.AsString) {
							GameObject arrow = NGUITools.AddChild(aExplorerRef.uiRoot.gameObject,aExplorerRef.QuestArrowPrefab);
							QuestArrow qa = arrow.GetComponent<QuestArrow>();
							qa.justTarget(objects[i].gameObject);
						}
					}
					
					Destroy(this.gameObject);
					return true;
				} else {
					for(int i = 0;i<objects.Length;i++) {
						MapDoorway m = objects[i].GetComponent<MapDoorway>();
						if(m.targetDoorway==targetMap.AsString) {
							targetPosition = objects[i].transform.localPosition;
							targetObject = objects[i].transform;
							return true;
						}
					}
				}
				Lua.Result res = DialogueLua.GetQuestField(aQuest,"IfMapNotOnScreenFindDoorway");
				string overrideMap = res.AsString;
				if(overrideMap!=null&&overrideMap!="nul"&&overrideMap!="nil"&&overrideMap!="null") {
					for(int i = 0;i<objects.Length;i++) {
						MapDoorway m = objects[i].GetComponent<MapDoorway>();
						if(m.targetDoorway==overrideMap) {
							targetPosition = objects[i].transform.localPosition;
							targetObject = objects[i].transform;
							return true;
						}
					}
				}
				
			}
			
		//	setQuestEntryComplete(aQuest,aEntry);
			return false;
		}
		private void setQuestEntryActive(string aQuest,int aEntry) {
			
			QuestLog.SetQuestEntryState(aQuest,aEntry+1,QuestState.Active);
		}
		private void setQuestEntryComplete(string aQuest,int aEntry) {
			Debug.Log ("Setting Quest Entry to Complete: "+aQuest+" - "+aEntry);
			QuestLog.SetQuestEntryState(aQuest,aEntry+1,QuestState.Success);
			Debug.Log ("Getting Quest Entry State: "+QuestLog.GetQuestEntryState(aQuest,aEntry+1).ToString());
			GameObject dm = GameObject.FindGameObjectWithTag("DialogueManager");
			if(dm!=null) {
		//		NGUIQuestTracker nq = dm.GetComponent<NGUIQuestTracker>();
		//		nq.UpdateTracker();
			}
		}
		/*
		public bool initForCompletion(string aQuest,Map aMap) {
		
			Lua.Result r = DialogueLua.GetQuestField(aQuest,"Location");
			
			if(aMap.name==r.AsString) {
				Lua.Result npcName = DialogueLua.GetQuestField(aQuest,"CompletionNPC");
				string npc = npcName.AsString;
				GameObject npcObj = GameObject.Find(npc);
				if(npcObj!=null) {
					targetPosition = npcObj.gameObject.transform.localPosition;
					testForOverrideArrowPos(aQuest);
					Debug.Log("Found CompletionNPC At "+npc);
					return true;
				} else {
					Debug.LogError("Couldn't find NPC: "+npc);
				}
			} else {
				
			}
			

			return false;
		}*/
		private void testForOverrideArrowPos(string aQuest) {
			Lua.Result overridePos = DialogueLua.GetQuestField(aQuest,"OverrideCompletionNPCArrow");
			if(overridePos.AsString.Length>0) {
				string[] split = overridePos.AsString.Split(new char[] {'|'});
				if(split.Length>=2) {
					targetPosition = new Vector3((float) Convert.ToDouble(split[0]),(float) Convert.ToDouble(split[1]),0f);
					targetObject = null;
					_overrideArrowPos = true;
					if(split.Length>=3)
						targetAngle = (float) Convert.ToDouble(split[2]); else {
							targetAngle = float.MinValue;
							_overrideArrowPos = false;
						}
				} else {
					targetAngle = (float) Convert.ToDouble(split[0]);
				}
				
			}
		}
		
		public void justTarget(GameObject aObject) {
			this.targetObject = aObject.transform;
			this.targetPosition = aObject.transform.position;
		}
		public bool initForCompletion(string aQuest,string aNPC,Map aMapRef) {
			quest = aQuest;
			string[] split = aNPC.Split(new char[] {','});
			if(split.Length>1) {
				alternativeTarget = split[1];
				aNPC = split[0];
			} else {
				alternativeTarget = "";
			}
			Lua.Result r = DialogueLua.GetQuestField(aQuest,"Location");
			if(r.AsString==aMapRef.name||aMapRef.fileName==r.AsString) {
				Lua.Result overridearrowDie=  DialogueLua.GetQuestField(aQuest,"CompletionNPCArrowBehaviour");
				if(overridearrowDie.AsString=="none") {
					this.gameObject.SetActive(false);
					return false;
				}
				GameObject npcObj = GameObject.Find(aNPC);
				if(npcObj==null&&alternativeTarget.Length>0) {
					npcObj = GameObject.Find(alternativeTarget);
				}
				
				if(npcObj!=null) {
					if(aNPC.Contains("Btn")) {
						Bounds b = NGUIMath.CalculateRelativeWidgetBounds(npcObj.transform);
						Vector3 extents = b.extents;
						extents.y *= -1;
						this.targetPosition = extents;
						_overrideArrowPos =true;
						 
						this.transform.parent = npcObj.transform;
					} else {
						targetPosition = npcObj.transform.localPosition;
						targetObject = npcObj.transform;
					}
				//	targetPosition = npcObj.gameObject.transform.localPosition;
					targetPosition.y -= 3f;
					targetObj = npcObj;

				
					testForOverrideArrowPos(aQuest);
					return true;
				} else {
					StartCoroutine(tryAgainInASecond(aQuest,aNPC));
					return true;
				}
			} else {
				GameObject[] objects = GameObject.FindGameObjectsWithTag("Doorway");
				Lua.Result overrideArrow = DialogueLua.GetQuestField(aQuest,"OverrideMapDoorwayArrow");
		

				
				if(overrideArrow.AsString.Length>4) {
					GameObject overrideLocation = GameObject.Find(overrideArrow.AsString);
					targetPosition = overrideLocation.transform.localPosition;
					targetObject = overrideLocation.transform;
					return true;
				}
				for(int i = 0;i<objects.Length;i++) {
					MapDoorway m = objects[i].GetComponent<MapDoorway>();
					if(m!=null) {
						if(m.targetDoorway==r.AsString) {
							targetPosition = objects[i].transform.localPosition;
							targetObject = objects[i].transform;
							return true;
						}
					}
				}
				Lua.Result res = DialogueLua.GetQuestField(aQuest,"IfMapNotOnScreenFindDoorway");
				string overrideMap = res.AsString;
				if(overrideMap!=null&&overrideMap!="nul"&&overrideMap!="nil"&&overrideMap!="null") {
					for(int i = 0;i<objects.Length;i++) {
						MapDoorway m = objects[i].GetComponent<MapDoorway>();
						if(m!=null) {
							if(m.targetDoorway==overrideMap) {
								targetPosition = objects[i].transform.localPosition;
								targetObject = objects[i].transform;
								return true;
							}
						}
					}
				}
				

			}

			return false;
		}
		private IEnumerator tryAgainInASecond(string aQuest,string aNPC) {
			yield return new WaitForSeconds(1f);
			GameObject npcObj = GameObject.Find(aNPC);
			
			if(npcObj!=null) {
				if(aNPC.Contains("Btn")) {
					Bounds b = NGUIMath.CalculateRelativeWidgetBounds(npcObj.transform);
					Vector3 extents = b.extents;
					extents.y *= -1;
					this.targetPosition = extents;
					_overrideArrowPos =true;
					
					this.transform.parent = npcObj.transform;
				} else {
					targetPosition = npcObj.transform.localPosition;
				}
				//	targetPosition = npcObj.gameObject.transform.localPosition;
				targetPosition.y -= 1.2f;
				targetObj = npcObj;
				
				
				testForOverrideArrowPos(aQuest);
			}else {
				Destroy (this.gameObject);
			}
		}
		//Jagwar|Ninevolt|Freyon|Viperno
		public void Update() {
			if(!_inited) {
				userAvatar = GameObject.FindGameObjectWithTag("Player");
				camera = GameObject.FindGameObjectWithTag("MainCamera");
				this.transform.localScale = new Vector3(0.5f,0.5f,0.5f);
				_inited = true;
			} else {
				if(camera==null) {
					Destroy (this);
					return;
				}
				if(this._overrideArrowPos) {
					transform.localPosition = targetPosition;
					if(targetAngle!=float.MinValue) {
						transform.rotation = Quaternion.AngleAxis(targetAngle,Vector3.forward);
					} else {
						Vector3 dir = targetPosition*10 - camera.transform.position*10;
						float angle = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg +90f;
						transform.rotation = Quaternion.AngleAxis(angle, Vector3.forward);
						_overrideArrowPos = false;
					}
					
				} else {
					if(targetObject!=null) {
						targetPosition = targetObject.transform.localPosition;
					}

					Vector3 pos = gameCamera.WorldToViewportPoint(targetPosition);

					// If visible, update the position
					transform.position = uiCamera.ViewportToWorldPoint(pos);
					pos = transform.localPosition;
					pos.x = Mathf.FloorToInt(pos.x);
					pos.y = Mathf.FloorToInt(pos.y);
					pos.z = 0f;
					transform.localPosition = pos;


					Vector3 dir = targetPosition*10 - camera.transform.position*10;
					float angle = Mathf.Atan2(dir.y, dir.x) * Mathf.Rad2Deg +90f;
					transform.rotation = Quaternion.AngleAxis(angle, Vector3.forward);
					const float SCREEN_X = 210;
					const float SCREEN_Y = 190;
					bool hasBeenClamped = false;
					Vector3 myNewPos = new Vector3();
					if(Math.Abs(dir.x)<SCREEN_X) {
						dir.x = dir.x*3f;
					} /*else {
						myNewPos.x = Mathf.Clamp(dir.x,SCREEN_X*-1,SCREEN_X);
						hasBeenClamped = true;
					}*/
					
					if(Math.Abs(dir.y)<SCREEN_Y) {
						dir.y = dir.y*3f;
					}/* else {
						myNewPos.y = Mathf.Clamp(dir.y,SCREEN_Y*-1,SCREEN_Y);
						hasBeenClamped = true;
					}*/
					
					myNewPos.x = Mathf.Clamp (dir.x,SCREEN_X*-1,SCREEN_X);
					myNewPos.y = Mathf.Clamp (dir.y,SCREEN_Y*-1,SCREEN_Y);
					if(myNewPos.x!=dir.x||myNewPos.y!=dir.y) {
						hasBeenClamped = true;
						if(this.behaviour==EArrowBehaviour.DisappearWhenOnScreen&&!this._isVisible) {
							TweenAlpha.Begin(this.gameObject,0.25f,1f);
							this._isVisible = true;
						} else {
							
						}
					} else {
						hasBeenClamped = false;
						if(this.behaviour==EArrowBehaviour.DisappearWhenOnScreen&&this._isVisible) {
							
							TweenAlpha.Begin(this.gameObject,0.25f,0f);
							this._isVisible = false;
							Debug.Log ("QuestArrow: show alert: "+alertWhenOnScreen);
							if(alertWhenOnScreen.Length>5)
								if(Time.time-startTime>5f)
									DialogueManager.ShowAlert(this.alertWhenOnScreen);
						
						} else {

						}
					}
					transform.localPosition = myNewPos;
				}
			}
		}
	}
}

